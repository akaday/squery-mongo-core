(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{112:function(e,a,t){"use strict";t.d(a,"a",(function(){return p})),t.d(a,"b",(function(){return d}));var n=t(0),r=t.n(n);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function c(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?c(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),b=function(e){var a=r.a.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=b(e.components);return r.a.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},m=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=b(t),m=n,d=p["".concat(c,".").concat(m)]||p[m]||u[m]||l;return t?r.a.createElement(d,o(o({ref:a},s),{},{components:t})):r.a.createElement(d,o({ref:a},s))}));function d(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,c=new Array(l);c[0]=m;var o={};for(var i in a)hasOwnProperty.call(a,i)&&(o[i]=a[i]);o.originalType=e,o.mdxType="string"==typeof e?e:n,c[1]=o;for(var s=2;s<l;s++)c[s]=t[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},113:function(e,a,t){"use strict";function n(e){var a,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(t=n(e[a]))&&(r&&(r+=" "),r+=t);else for(a in e)e[a]&&(r&&(r+=" "),r+=a);return r}a.a=function(){for(var e,a,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(a=n(e))&&(r&&(r+=" "),r+=a);return r}},117:function(e,a,t){"use strict";var n=t(0),r=t(118);a.a=function(){const e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},118:function(e,a,t){"use strict";var n=t(0);const r=Object(n.createContext)(void 0);a.a=r},119:function(e,a,t){"use strict";var n=t(0),r=t.n(n),l=t(117),c=t(113),o=t(48),i=t.n(o);const s=37,b=39;a.a=function(e){const{block:a,children:t,defaultValue:o,values:p,groupId:u,className:m}=e,{tabGroupChoices:d,setTabGroupChoices:j}=Object(l.a)(),[O,h]=Object(n.useState)(o),[g,f]=Object(n.useState)(!1);if(null!=u){const e=d[u];null!=e&&e!==O&&p.some((a=>a.value===e))&&h(e)}const v=e=>{h(e),null!=u&&j(u,e)},y=[],$=e=>{e.metaKey||e.altKey||e.ctrlKey||f(!0)},N=()=>{f(!1)};return Object(n.useEffect)((()=>(window.addEventListener("keydown",$),window.addEventListener("mousedown",N),()=>{window.removeEventListener("keydown",$),window.removeEventListener("mousedown",N)})),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":a},m)},p.map((e=>{let{value:a,label:t}=e;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===a,className:Object(c.a)("tabs__item",i.a.tabItem,{"tabs__item--active":O===a}),style:g?{}:{outline:"none"},key:a,ref:e=>y.push(e),onKeyDown:e=>{((e,a,t)=>{switch(t.keyCode){case b:((e,a)=>{const t=e.indexOf(a)+1;e[t]?e[t].focus():e[0].focus()})(e,a);break;case s:((e,a)=>{const t=e.indexOf(a)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,a)}})(y,e.target,e),$(e)},onFocus:()=>v(a),onClick:()=>{v(a),f(!1)},onPointerDown:()=>f(!1)},t)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(t).filter((e=>e.props.value===O))[0]))}},120:function(e,a,t){"use strict";var n=t(0),r=t.n(n);a.a=function(e){return r.a.createElement("div",null,e.children)}},92:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return s})),t.d(a,"metadata",(function(){return b})),t.d(a,"rightToc",(function(){return p})),t.d(a,"default",(function(){return m}));var n=t(2),r=t(6),l=(t(0),t(112)),c=t(119),o=t(120),i=["components"],s={id:"what",title:" ",sidebar_label:"What is cMQL?",slug:"/"},b={unversionedId:"intro/what",id:"intro/what",isDocsHomePage:!1,title:" ",description:"What is cMQL",source:"@site/docs/intro/what.md",slug:"/",permalink:"/cmql-core/docs/",version:"current",sidebar_label:"What is cMQL?",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/intro/guide"},next:{title:" ",permalink:"/cmql-core/docs/intro/why"}},p=[{value:"What is cMQL",id:"what-is-cmql",children:[]},{value:"Examples",id:"examples",children:[{value:"Example1",id:"example1",children:[]},{value:"Example2",id:"example2",children:[]},{value:"Example 3",id:"example-3",children:[]},{value:"Example 4",id:"example-4",children:[]}]},{value:"cMQL as tool to generate MQL",id:"cmql-as-tool-to-generate-mql",children:[{value:"Manual",id:"manual",children:[]},{value:"Auto",id:"auto",children:[]}]},{value:"cMQL as API",id:"cmql-as-api",children:[{value:"Java programmers",id:"java-programmers",children:[]},{value:"Node programmers",id:"node-programmers",children:[]},{value:"Clojure programmers",id:"clojure-programmers",children:[]},{value:"ClojureScript programmers",id:"clojurescript-programmers",children:[]}]},{value:"cMQL-goals",id:"cmql-goals",children:[{value:"Simple",id:"simple",children:[]},{value:"Cover MQL",id:"cover-mql",children:[]},{value:"Easy to use from drivers",id:"easy-to-use-from-drivers",children:[]},{value:"Run in many drivers",id:"run-in-many-drivers",children:[]},{value:"Portability",id:"portability",children:[]},{value:"Perfomance",id:"perfomance",children:[]},{value:"Replace Javascript",id:"replace-javascript",children:[]},{value:"Unify MongoDB developement",id:"unify-mongodb-developement",children:[]}]}],u={rightToc:p};function m(e){var a=e.components,t=Object(r.a)(e,i);return Object(l.b)("wrapper",Object(n.a)({},u,t,{components:a,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"what-is-cmql"},"What is cMQL"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"query and data processing language for MongoDB  "),Object(l.b)("li",{parentName:"ul"},"generates MQL that can be used as standalone commands, or as arguments in driver methods"),Object(l.b)("li",{parentName:"ul"},"main characteristics",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"up to ",Object(l.b)("strong",{parentName:"li"},"3x")," less code"),Object(l.b)("li",{parentName:"ul"},"simple structure of code"),Object(l.b)("li",{parentName:"ul"},"simple notation"))),Object(l.b)("li",{parentName:"ul"},"() for code , {} for data",Object(l.b)("br",{parentName:"li"}),"like MQL with () ",Object(l.b)("a",{parentName:"li",href:"/docs/intro/why"},"see also"),"      "),Object(l.b)("li",{parentName:"ul"},"portable queries in both cmql-js and cmql-java      "),Object(l.b)("li",{parentName:"ul"},"with the same perfomance          ")),Object(l.b)("p",null,"cMQL in order to archive the above goals, is made with Clojure",Object(l.b)("br",{parentName:"p"}),"\n","It can be used as a tool to generate MQL or to call cMQL code directly.    "),Object(l.b)("p",null,Object(l.b)("a",{parentName:"p",href:"http://localhost:3000/docs/intro/guide"},"Learning guide")),Object(l.b)("h2",{id:"examples"},"Examples"),Object(l.b)("p",null,"The easiest way to start is to use it online at ",Object(l.b)("a",{parentName:"p",href:"www.cmql-live.org"},"cMQL-live"),Object(l.b)("br",{parentName:"p"}),"\n","It has > 100 examples, type on search box the MQL operator that you want to search for, and results will appear sorted by query size.  "),Object(l.b)("p",null,"StackOverflow was used to create the examples, to see the question press on the ",Object(l.b)("strong",{parentName:"p"},"ExLink"),"  "),Object(l.b)("p",null,"cMQL-live is an online cMQL to MQL generator, providing a subset of cMQL (2 commands aggregate/update)\nBellow is 4 examples just to show how cMQL looks like.   "),Object(l.b)("h3",{id:"example1"},"Example1"),Object(l.b)(c.a,{defaultValue:"cMQL",values:[{label:"cMQL",value:"cMQL"},{label:"MQL",value:"MQL"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"cMQL",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},'(q (= :bedrooms 1)\n   (= :country.code "GR")\n   (group {:_id :stars}\n          {:average-price (avg :price)})\n   (sort :average-price)\n   (limit 1))\n'))),Object(l.b)(o.a,{value:"MQL",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},'aggregate(\n[{"$match": \n   {"$expr": \n     {"$and": \n       [{"$eq": ["$bedrooms", 1]},\n        {"$eq": ["$country.code", "GR"]}]}}},\n {"$group": {"_id": "$stars",\n             "average-price": {"$avg": "$price"}}},\n {"$sort": {"average-price": 1}},\n {"$limit": 1}])\n')))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"cMQL improvements")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"used common operators names for example ",Object(l.b)("inlineCode",{parentName:"li"},"=")," not ",Object(l.b)("inlineCode",{parentName:"li"},'"$eq"')),Object(l.b)("li",{parentName:"ul"},"replaced ",Object(l.b)("inlineCode",{parentName:"li"},"{}")," with ",Object(l.b)("inlineCode",{parentName:"li"},"()")," for code"),Object(l.b)("li",{parentName:"ul"},"simpler notation ",Object(l.b)("inlineCode",{parentName:"li"},":field")," for references, instead of ",Object(l.b)("inlineCode",{parentName:"li"},'$ ""')," "),Object(l.b)("li",{parentName:"ul"},"less verbose"),Object(l.b)("li",{parentName:"ul"},"auto-add stages like match")),Object(l.b)("p",null,"Result is more clear code, clear structure, significant less code.",Object(l.b)("br",{parentName:"p"}),"\n","(",Object(l.b)("strong",{parentName:"p"},"95")," less non-whitespace characters and ~",Object(l.b)("strong",{parentName:"p"},"2x")," less code)"),Object(l.b)("h3",{id:"example2"},"Example2"),Object(l.b)(c.a,{defaultValue:"cMQL",values:[{label:"cMQL",value:"cMQL"},{label:"MQL",value:"MQL"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"cMQL",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},"(q :people.workers\n   (< :salary 1000)\n   (> :years 1)\n   {:children (filter (fn [:child.] (< :child.age. 15)) :all-children)}\n   (>= :children 2)\n   {:bonus (reduce (fn [:total. :child.]\n                     (cond (< :child.age. 5) (+ :total. 100)\n                           (< :child.age. 10) (+ :total. 50)\n                           :else (+ :total. 20)))\n                   0\n                   :children)}\n   [:!id :name {:new-salary (+ :salary (if- (> :bonus 200) 200 :bonus))}]\n   (sort :!new-salary))\n"))),Object(l.b)(o.a,{value:"MQL",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},'client.db("people").collection("workets").aggregate(\n[{"$match": \n   {"$expr": \n     {"$and": [{"$lt": ["$salary", 1000]}, {"$gt": ["$years", 1]}]}}},\n  {"$set": \n    {"children": \n      {"$filter": \n        {"input": "$all-children",\n          "cond": {"$lt": ["$$child.age", 15]},\n          "as": "child"}}}},\n  {"$match": {"$expr": {"$gte": ["$children", 2]}}},\n  {"$set": \n    {"bonus": \n      {"$reduce": \n        {"input": "$children",\n          "initialValue": 0,\n          "in": \n          {"$let": \n            {"vars": {"total": "$$value", "child": "$$this"},\n              "in": \n              {"$switch": \n                {"branches": \n                  [{"case": {"$lt": ["$$child.age", 5]},\n                    "then": {"$add": ["$$total", 100]}},\n                   {"case": {"$lt": ["$$child.age", 10]},\n                    "then": {"$add": ["$$total", 50]}}],\n                  "default": {"$add": ["$$total", 20]}}}}}}}}},\n  {"$project": \n    {"id": 0,\n      "name": 1,\n      "new-salary": \n      {"$add": \n        ["$salary", {"$cond": [{"$gt": ["$bonus", 200]}, 200, "$bonus"]}]}}},\n  {"$sort": {"new-salary": -1}}])\n')))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"cMQL improvements")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"the ones that are noted the previous example including"),Object(l.b)("li",{parentName:"ul"},"auto added those common used stages",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"()")," -> for filters "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"{}")," -> for addFields"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"[]")," -> for project "))),Object(l.b)("li",{parentName:"ul"},"mql variable notation   ",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},":child. = $$child")," "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},':child.age.="$$child.age"')))),Object(l.b)("li",{parentName:"ul"},"sort and project simpler with ",Object(l.b)("inlineCode",{parentName:"li"},"!")," for the opposite value  "),Object(l.b)("li",{parentName:"ul"},"filter/map/reduce minimalistic with simple programming structure  ",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-text"},"(filter (fn [:child.] ...) :all-children)\n(reduce (fn [:total. :child.] ...) :children)\n")),"Alternative if we didn't want to use extra variables and ",Object(l.b)("inlineCode",{parentName:"li"},"$let")," in reduce",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre"},"(filter (fn [:this.] ...) :all-children)\n(reduce (fn [:value. :this.] ...) :children)\n")))),Object(l.b)("h3",{id:"example-3"},"Example 3"),Object(l.b)("p",null,"cMQL is about less code, simple notation, good structure.",Object(l.b)("br",{parentName:"p"}),"\n","Here ~",Object(l.b)("strong",{parentName:"p"},"3x")," less code, 208 characters less, with simpler notation."),Object(l.b)("p",null,"But here the most important is the structure.\ncMQL makes big and complicated queries easy to read and write."),Object(l.b)(c.a,{defaultValue:"cMQL",values:[{label:"cMQL",value:"cMQL"},{label:"MQL",value:"MQL"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"cMQL",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},"(q {:s \n    (let [:a. (reduce (fn [:sum. :n.] (+ :sum. :n.))\n              0\n              (filter (fn [:w.] (some? :w.))\n                      (map (fn [:v.] (+ :v. 1)) :myarray)))]\n         :a.)})\n"))),Object(l.b)(o.a,{value:"MQL",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},'aggregate(\n[{"$set": \n   {"s": \n     {"$let": \n       {"vars": \n         {"a": \n           {"$reduce": \n             {"input": \n               {"$filter": \n                 {"input": \n                   {"$map": \n                     {"input": "$myarray", "in": {"$add": ["$$v", 1]}, "as": "v"}},\n                      "cond": {"$ne": ["$$w", null]},\n                      "as": "w"}},\n             "initialValue": 0,\n             "in": \n             {"$let": \n               {"vars": {"sum": "$$value", "n": "$$this"},\n                "in": {"$add": ["$$sum", "$$n"]}}}}}},\n        "in": {"$add": ["$$a", "$b"]}}}}}])\n')))),Object(l.b)("h3",{id:"example-4"},"Example 4"),Object(l.b)("p",null,"Overview query of many aggregate operators. "),Object(l.b)("p",null,"The difference is clear, in all levels"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"size of code (+1330 more characters)"),Object(l.b)("li",{parentName:"ul"},"lines of code (+ 60 more lines)"),Object(l.b)("li",{parentName:"ul"},"notation"),Object(l.b)("li",{parentName:"ul"},"structure")),Object(l.b)(c.a,{defaultValue:"cMQL",values:[{label:"cMQL",value:"cMQL"},{label:"MQL",value:"MQL"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"cMQL",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},'(q (= :a (div (* :b (pow 20 2)) 10))\n   (= :b (not (or (< :a 1) (> :a 2))))\n   (= :c (trim (upper-case (subs :f 0 5))))\n   (= :d (count-str (str "a" :c "c")))\n   (or (exists? :c) (string? :d) (array? :b) (object? :c) (long? :d))\n\n   {\n    :a (map (fn [:v.] (+ :v. 1)) :myarray)\n    :b (filter (fn [:w.] (some? :w.)) :myarray)\n    :c (reduce (fn [:sum. :n.] (+ :sum. :n.)) 0 :myarray)\n    :d (concat :myarray (conj :myarray 10) (take 2 10 :myarray))\n    :e (get (take 10 (reverse (ziparray :x :y :z))) 2)\n    :f (contains? (difference (union :x :y (intersection :w :z)) [1 2 3]) 4)\n    :g (all-true? :z)\n    :h (empty? :z)\n    }\n\n    [\n    {:j (let [:a. 1\n              :v. (+ :a. 1)\n              :x. (+ :v. 2)\n              :z. (+ :v. :x.)]\n         (cond (= :v. 10) 20\n               (= :v. 20) 30\n              :else 0))}\n\n    {:k (if- (contains? :myarray 10)\n         (take 0 10 (conj-distinct :myarray 10))\n         (get :myarray 5))}\n\n    {:l (let [:a. (reduce (fn [:sum. :n.] (+ :sum. :n.))\n                          0\n                         (filter (fn [:w.] (some? :w.))\n                                   (map (fn [:v.] (+ :v. 1)) :myarray)))\n              :b. (let [:c. (into {} (ziparray (range 20) :myarray))]\n                    (into [] (merge :c. :a.)))]\n         (concat :a. :b.))}])\n'))),Object(l.b)(o.a,{value:"MQL",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},'aggregate(\n[{"$match": \n    {"$expr": \n      {"$and": \n        [{"$eq": \n            ["$a",\n              {"$divide": [{"$multiply": ["$b", {"$pow": [20, 2]}]}, 10]}]},\n          {"$eq": \n            ["$b",\n              {"$not": [{"$or": [{"$lt": ["$a", 1]}, {"$gt": ["$a", 2]}]}]}]},\n          {"$eq": \n            ["$c",\n              {"$trim": {"input": {"$toUpper": {"$substrCP": ["$f", 0, 5]}}}}]},\n          {"$eq": ["$d", {"$strLenCP": {"$concat": ["a", "$c", "c"]}}]},\n          {"$or": \n            [{"$ne": [{"$type": "$c"}, "missing"]},\n              {"$eq": [{"$type": "$d"}, "string"]}, {"$isArray": ["$b"]},\n              {"$eq": [{"$type": "$c"}, "object"]},\n              {"$eq": [{"$type": "$d"}, "long"]}]}]}}},\n  {"$set": \n    {"a": \n      {"$map": {"input": "$myarray", "in": {"$add": ["$$v", 1]}, "as": "v"}},\n      "b": \n      {"$filter": \n        {"input": "$myarray", "cond": {"$ne": ["$$w", null]}, "as": "w"}},\n      "c": \n      {"$reduce": \n        {"input": "$myarray",\n          "initialValue": 0,\n          "in": \n          {"$let": \n            {"vars": {"sum": "$$value", "n": "$$this"},\n              "in": {"$add": ["$$sum", "$$n"]}}}}},\n      "d": \n      {"$concatArrays": \n        ["$myarray", {"$concatArrays": ["$myarray", [10]]},\n          {"$slice": ["$myarray", 2, 10]}]},\n      "e": \n      {"$arrayElemAt": \n        [{"$slice": \n            [{"$reverseArray": {"$zip": {"inputs": ["$x", "$y", "$z"]}}}, 10]},\n          2]},\n      "f": \n      {"$in": \n        [4,\n          {"$setDifference": \n            [{"$setUnion": ["$x", "$y", {"$setIntersection": ["$w", "$z"]}]},\n              [1, 2, 3]]}]},\n      "g": {"$allElementsTrue": "$z"},\n      "h": {"$eq": ["$z", []]}}},\n  {"$project": \n    {"j": \n      {"$let": \n        {"vars": {"a": 1},\n          "in": \n          {"$let": \n            {"vars": {"v": {"$add": ["$$a", 1]}},\n              "in": \n              {"$let": \n                {"vars": {"x": {"$add": ["$$v", 2]}},\n                  "in": \n                  {"$let": \n                    {"vars": {"z": {"$add": ["$$v", "$$x"]}},\n                      "in": \n                      {"$switch": \n                        {"branches": \n                          [{"case": {"$eq": ["$$v", 10]}, "then": 20},\n                            {"case": {"$eq": ["$$v", 20]}, "then": 30}],\n                          "default": 0}}}}}}}}}},\n      "k": \n      {"$cond": \n        [{"$in": [10, "$myarray"]},\n          {"$slice": \n            [{"$cond": \n                [{"$in": [10, "$myarray"]}, "$myarray",\n                  {"$concatArrays": ["$myarray", [10]]}]},\n              0, 10]},\n          {"$arrayElemAt": ["$myarray", 5]}]},\n      "l": \n      {"$let": \n        {"vars": \n          {"a": \n            {"$reduce": \n              {"input": \n                {"$filter": \n                  {"input": \n                    {"$map": \n                      {"input": "$myarray", "in": {"$add": ["$$v", 1]}, "as": "v"}},\n                    "cond": {"$ne": ["$$w", null]},\n                    "as": "w"}},\n                "initialValue": 0,\n                "in": \n                {"$let": \n                  {"vars": {"sum": "$$value", "n": "$$this"},\n                    "in": {"$add": ["$$sum", "$$n"]}}}}}},\n          "in": \n          {"$let": \n            {"vars": \n              {"b": \n                {"$let": \n                  {"vars": \n                    {"c": \n                      {"$arrayToObject": \n                        {"$zip": {"inputs": [{"$range": [0, 20]}, "$myarray"]}}}},\n                    "in": \n                    {"$map": \n                      {"input": \n                        {"$objectToArray": {"$mergeObjects": ["$$c", "$$a"]}},\n                        "in": ["$$m.k", "$$m.v"],\n                        "as": "m"}}}}},\n              "in": {"$concatArrays": ["$$a", "$$b"]}}}}}}}])\n')))),Object(l.b)("h2",{id:"cmql-as-tool-to-generate-mql"},"cMQL as tool to generate MQL"),Object(l.b)("p",null,"This method uses the JSON portabillity,and it can be used from any driver language,",Object(l.b)("br",{parentName:"p"}),"\n","and without knowing any clojure."),Object(l.b)("h3",{id:"manual"},"Manual"),Object(l.b)("p",null,"Easy to use with languages that support JSON like literals like js/python etc"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"www.cmql-live.org"},"cMQL-live")," write cMQL\n(or make a small cMQL app just to generate MQL)"),Object(l.b)("li",{parentName:"ul"},"get the generated MQL, make small changes or add driver variables"),Object(l.b)("li",{parentName:"ul"},"add the MQL in code  ")),Object(l.b)("h3",{id:"auto"},"Auto"),Object(l.b)("p",null,"The above can be automated and expanded to languages like Java/Go etc that don't support JSON like literals.  "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"cMQL can become MQL, driver variables can have a symbolic notation for example ",Object(l.b)("inlineCode",{parentName:"li"},'"$$$myvar"')),Object(l.b)("li",{parentName:"ul"},"MQL JSON can become an Document (with parse)"),Object(l.b)("li",{parentName:"ul"},"variables can be added to the Document object, from a hash-map that have ",Object(l.b)("inlineCode",{parentName:"li"},"{myvar : value}")," dynamically ")),Object(l.b)("p",null,"The cost is practical zero(queries are so small data-structures), and it only requires simple code to auto-mate it.\nThis method is the way to use MQL instead of driver query builders."),Object(l.b)("p",null,"For more information and example on how to use cMQL as tool see also ",Object(l.b)("a",{parentName:"p",href:"/docs/cmqltool/cmqltool"},"here")),Object(l.b)("h2",{id:"cmql-as-api"},"cMQL as API"),Object(l.b)("p",null,"JSON portabillity allowed us to use MQL in many drivers, but Clojure portabillity allows as to call cMQL directly.   "),Object(l.b)("p",null,"cMQL code can be called directly from the bellow languages (without generating MQL), and its simple like a normal function call         "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Java"),Object(l.b)("li",{parentName:"ul"},"Javascript"),Object(l.b)("li",{parentName:"ul"},"Clojure"),Object(l.b)("li",{parentName:"ul"},"Clojurescript ")),Object(l.b)("p",null,"Clojure is made to be a ",Object(l.b)("a",{parentName:"p",href:"/docs/#easy-to-use-from-drivers"},"hosted language")," and using cMQL from Java or Nodejs app is like a normal function call."),Object(l.b)("p",null,"This way we don't need to generate MQL, we call cMQL directly, and we can choose how much clojure/cMQL to used.",Object(l.b)("br",{parentName:"p"}),"\n","We can use cMQL only for queries or add application logic also, or even make all the application in 1 language clojure/cmql"),Object(l.b)("h3",{id:"java-programmers"},"Java programmers"),Object(l.b)("p",null,"Calling cMQL from Java is like a normal static java function",Object(l.b)("br",{parentName:"p"}),"\n","Getting the benefits of cMQL to write data as json literals and queries easily",Object(l.b)("br",{parentName:"p"}),"\n","cMQL is functional and suitable for data processing and querying.",Object(l.b)("br",{parentName:"p"}),"\n","cMQL can be called like a normal static java function."),Object(l.b)("p",null,"Java programmers use cMQL-j.",Object(l.b)("br",{parentName:"p"}),"\n","See also ",Object(l.b)("a",{parentName:"p",href:"/docs/intro/why"},"Why cMQL")," and ",Object(l.b)("a",{parentName:"p",href:"/docs/cMQL-j/javaapp"},"Why cMQL for Java?")),Object(l.b)("h3",{id:"node-programmers"},"Node programmers"),Object(l.b)("p",null,"Calling cMQL from js is like a normal static java function",Object(l.b)("br",{parentName:"p"}),"\n","cMQL is functional and suitable for data processing and querying.",Object(l.b)("br",{parentName:"p"}),"\n","cMQL can be called like a normal js function."),Object(l.b)("p",null,"Node programmers use cMQL-js\nSee also ",Object(l.b)("a",{parentName:"p",href:"/docs/intro/why"},"Why cMQL")," and ",Object(l.b)("a",{parentName:"p",href:"/docs/cMQL-jS/nodejsapp"},"Why cMQL for Javascript?")),Object(l.b)("h3",{id:"clojure-programmers"},"Clojure programmers"),Object(l.b)("p",null,"cMQL is like Clojure.",Object(l.b)("br",{parentName:"p"}),"\n","It feels like querying MongoDB in Clojure.",Object(l.b)("br",{parentName:"p"}),"\n","If someone knows Clojure almost knows cMQL already.   "),Object(l.b)("p",null,"cMQL is fast because we can encode to BSON directly from Clojure,or decode directly\nfrom BSON.Perfomance is like native Java driver,even if we write or read clojure data.  "),Object(l.b)("p",null,"Clojure programmers use cMQL-j and the Java driver.",Object(l.b)("br",{parentName:"p"}),"\n","See also ",Object(l.b)("a",{parentName:"p",href:"/docs/intro/why"},"Why cMQL")," and ",Object(l.b)("a",{parentName:"p",href:"/docs/cMQL-j/clojureapp"},"Why cMQL for Clojure?"),"  "),Object(l.b)("h3",{id:"clojurescript-programmers"},"ClojureScript programmers"),Object(l.b)("p",null,"For the same reasons as Clojure programmers, described above. "),Object(l.b)("p",null,"ClojureScript programmers use cMQL-js and the Nodejs driver.",Object(l.b)("br",{parentName:"p"}),"\n","See also ",Object(l.b)("a",{parentName:"p",href:"/docs/intro/why"},"Why cMQL")," and ",Object(l.b)("a",{parentName:"p",href:"/docs/cMQL-js/clojurescriptapp"},"Why cMQL for Clojurescript?")),Object(l.b)("h2",{id:"cmql-goals"},"cMQL-goals"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Be simple,readable,and much smaller   "),Object(l.b)("li",{parentName:"ol"},"Cover MQL    "),Object(l.b)("li",{parentName:"ol"},"Easy to use from drivers  "),Object(l.b)("li",{parentName:"ol"},"Run in many drivers,be portable  "),Object(l.b)("li",{parentName:"ol"},"Use the driver way  "),Object(l.b)("li",{parentName:"ol"},"Perfomance,encode/decode BSON directly to the target language data-structures  "),Object(l.b)("li",{parentName:"ol"},"Popularity"),Object(l.b)("li",{parentName:"ol"},"Replace javascript "),Object(l.b)("li",{parentName:"ol"},"Unify MongoDB developement in 1 language    ")),Object(l.b)("h3",{id:"simple"},"Simple"),Object(l.b)("p",null,"cMQL main goal is to be   "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"much smaller in code (its 2-3x for the most queries)  "),Object(l.b)("li",{parentName:"ul"},"clear notation     "),Object(l.b)("li",{parentName:"ul"},"clear structure      ")),Object(l.b)("p",null,"Syntax and notation  "),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"{} for data  (like MQL)"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-text"},'{\n  :firstName "Louna"\n  :country   "Finland"\n  :city      "Jyvaskyla"\n  :degrees   ["Nurse" "Cardio emergencies qualified"]\n}\n'))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"() for code  (like clojure)"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-text"},"(reduce (fn [sum n] (+ sum n)) [] myarray)               ; clojure\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-text"},"(reduce (fn [:sum. :n.] (+ :sum. :n.)) [] :myarray)      ; cMQL\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-text"},'{"$reduce" {"input" "$myarray",                          ; MQL\n            "initialValue" [],\n            "in" {"$let" {"vars" {"sum" "$$value", "n" "$$this"},\n                          "in" {"$add" ["$$sum" "$$n"]}}}}}\n'))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Homoiconic",Object(l.b)("br",{parentName:"p"}),"\n","MQL cMQL are both homoiconic,meaning that code is written in data structures of the language",Object(l.b)("br",{parentName:"p"}),"\n","They both use a functional nested way of programming suitable for data processing  ")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Minimalistic "),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},'No extra words (like about "vars" "in" etc)'),Object(l.b)("li",{parentName:"ul"},'No symbols like $ $$ "" , no capital letters etc'))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Keywords for references and variables"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-text"},':afield => "$field"   reference\n:avar.  => "$$avar"   variable\n:avar.afield.  = :.avar.afield  variable path\n:REMOVE. => "$$REMOVE" system variable\n{:afield ""} => {"afield" ""}  :afield on the left as key is a string\n'))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Use of core language names"),Object(l.b)("p",{parentName:"li"},"We use =,> not equal gt etc ,cMQL feels like using clojure to query MongoDB",Object(l.b)("br",{parentName:"p"}),"\n","This is made possible with clojure's powerful macros  "),Object(l.b)("p",{parentName:"li"},"Inside the query we can refer to clojure with prefix like c/str.",Object(l.b)("br",{parentName:"p"}),"\n","If we need to write alot of code,to avoid the prefix we can make it a function.    "),Object(l.b)("p",{parentName:"li"},"For Clojure programmers this mean that they already know most part of cMQL",Object(l.b)("br",{parentName:"p"}),"\n","For non Clojure programmers cMQL is easier to learn that MQL  ")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Queries/pipelines  "),Object(l.b)("p",{parentName:"li"}," Queries are processed to allow the programmer to write minimal and intuitive code.",Object(l.b)("br",{parentName:"p"}),"\n","There is no perfomance cost,because queries are so small data structures.  "),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Auto add common used stages ",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"filters will become match stage  "),Object(l.b)("li",{parentName:"ul"},"{} is $addFields  "),Object(l.b)("li",{parentName:"ul"},"[] is $project , using ! to unset and {:anewfield ...} to addfield"))),Object(l.b)("li",{parentName:"ul"},"Sorting,Projecting notation :myfield :!myfield"),Object(l.b)("li",{parentName:"ul"},"nested stages becomes flatten,nil stages are removed ")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-text"},"(q :testdb.testcoll\n   (< :salary 1000)\n   (> :workingYears 1)\n   {:smallChildren (filter (fn [:child.] (< :child.age. 15)) :children)}\n   [:!_id :name :smallChildren.age {:new-salary (+ :salary 5)}]\n   (sort-s :!new-salary))\n")))),Object(l.b)("h3",{id:"cover-mql"},"Cover MQL"),Object(l.b)("p",null,"cMQL is made to cover MQL (MQL can be used raw inside cMQL also if we want)"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"operators (",Object(l.b)("a",{parentName:"li",href:"/docs/#update-and-query-operators"},"see also"),")  "),Object(l.b)("li",{parentName:"ol"},"stages"),Object(l.b)("li",{parentName:"ol"},"arguments"),Object(l.b)("li",{parentName:"ol"},"commands ")),Object(l.b)("p",null,"cMQL operators/stages/commands are part of the cMQL core and generate MQL operators/stages/commands.",Object(l.b)("br",{parentName:"p"}),"\n","cMQL arguments are used with the driver methods and are more driver depended and part of cMQL-j or cMQL-js.   "),Object(l.b)("p",null,"Example using the Java driver and showing the alternatives\nThe example is very small,but still code becomes 2x less."),Object(l.b)("p",null,"Java"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'zips.aggregate(\n      asList(\n        match(eq("state", "TX")),\n        group("$city", sum("totalPop", "$pop")),\n        project(fields(excludeId(),\n                       include("totalPop"),\n                       computed("city", "$_id"))),\n        sort(descending("totalPop"))));\n')),Object(l.b)("p",null,"Clojure interop"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'(.aggregate zips \n            [(match (eq "state" "TX"))\n             (group "$city" (sum "totalPop" "$pop"))\n             (project (fields (excludeId)\n                              (include "totalPop")\n                              (computed "city" "$_id")))\n             (sort (descending "totalPop"))])\n')),Object(l.b)("p",null,"cMQL arguments (keep the driver method,but pipeline in cMQL)"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'(.aggregate zips\n            (p (= :state "TX")\n               (group :city {:totalPop (sum :pop))\n               [:!_id :totalPop]\n               (sort :!totalPop))) \n')),Object(l.b)("p",null,"cMQL wrap methods "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'(q zips\n   (p (= :state "TX")\n      (group :city {:totalPop (sum :pop))\n      [:!_id :totalPop]\n      (sort :!totalPop))) \n')),Object(l.b)("p",null,"cMQL command like call (portabillity between the drivers)"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'(q zips\n   (= :state "TX")\n   (group :city {:totalPop (sum :pop))\n   [:!_id :totalPop]\n   (sort :!totalPop)\n   {:allowDiskUse true}) \n')),Object(l.b)("p",null,"cMQL is not intent to replace the driver or change the way the driver is used.\ncMQL is made to make queries easier."),Object(l.b)("h4",{id:"update-and-query-operators"},"Update and query operators"),Object(l.b)("p",null,"In MongoDB we have like 3 type of operators,query/update/aggregate.   "),Object(l.b)("p",null,"This is complex because"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"they share names  "),Object(l.b)("li",{parentName:"ul"},"functionality   "),Object(l.b)("li",{parentName:"ul"},"they have different syntax  "),Object(l.b)("li",{parentName:"ul"},"we cant mix them (exception is the $exp that allows aggregate operators in find)",Object(l.b)("br",{parentName:"li"}),"this is the main problem,for example i can try to do an update with update operator,\nbut i am bounded to use only update operators that are so limited.   ")),Object(l.b)("p",null,"To avoid this complexity cMQL tries to use 1 way,and do the querying and updates with the aggregation framework.   "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"aggregate operators inside the $match stage with $exp",Object(l.b)("br",{parentName:"li"}),"MongoDB 5 allows index use not only with $exp not only for $eq,",Object(l.b)("a",{parentName:"li",href:"https://docs.mongodb.com/v5.0/reference/operator/query/expr/#behavior"},"see v5 docs"),Object(l.b)("br",{parentName:"li"}),"So far to allow the use of index cMQL wraped some query operators,and if needed more can be wrapped.    "),Object(l.b)("li",{parentName:"ul"},"pipeline updates (cMQL makes pipelines easy)  "),Object(l.b)("li",{parentName:"ul"},'aggregation "versions" of query operators to replace them   ')),Object(l.b)("p",null,"If something cannot be done with the aggregation framework"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"use raw MQL inside cMQL"),Object(l.b)("li",{parentName:"ul"},"or use the driver with update/query operator  "),Object(l.b)("li",{parentName:"ul"},"use javascript")),Object(l.b)("p",null,"For example we can use raw MQL query operators inside cMQL   "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},'(q :testdb.testcoll\n   {"$match" {"$or" [{"score" {"$gt" 70 "$lt" 90}} {"views" {"$gte" 1000}}]}}\n   (limit 1))\n')),Object(l.b)("p",null,"If an operator can't be replaced from the aggregation framework,and its commonly used,\ncMQL can change in the future to support that operator.  "),Object(l.b)("h3",{id:"easy-to-use-from-drivers"},"Easy to use from drivers"),Object(l.b)("p",null,"MQL is using JSON to reach developers in different languages.",Object(l.b)("br",{parentName:"p"}),"\n","cMQL is using clojure as a hosted language to reach developers in different languages.   "),Object(l.b)("h4",{id:"clojures-interop"},"Clojure's Interop"),Object(l.b)("p",null,"cMQL as a clojure library uses clojure's interop\nClojure is made from the start to be a hosted language and interop with the host\nlanguage is very easy"),Object(l.b)("p",null,"Clojure doesn't just runs on the platform,each Clojure version is made for the specific\nplatform,for example Clojure collections are Java Collections also.  "),Object(l.b)("p",null,"Using Java/Js from Clojure is completly easy."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},"For example \naggregate(acoll,apipeline);\nBecomes\n(.aggregate acol acoll apipeline)\n")),Object(l.b)("p",null,"The opposite calling Clojure "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Clojurescript\nClojurescript functions are javascript functions,so we simply call them"),Object(l.b)("li",{parentName:"ul"},"Clojure\nif the Clojure programmer made us a Java class, we can call Clojure like a Java static method\nif he didnt we need 1-2 lines of code to make the java wrapper,and then we call like a normal Java")),Object(l.b)("h4",{id:"cmql-uses-the-driver-way"},"cMQL uses the driver way"),Object(l.b)("p",null,'cMQL also "respects" the driver way, cMQL targets only the query part.',Object(l.b)("br",{parentName:"p"}),"\n","It doesnt attempt to change the way we use the driver for example how we connect to the database etc",Object(l.b)("br",{parentName:"p"}),"\n","Only exceptions are complicated things off the driver or very commonly used parts of the driver  "),Object(l.b)("p",null,"For example cMQL doesn't support the wrap of driver methods even the query methods,but for aggregate\nwe wrap it with the q macro,because its so commonly used.   "),Object(l.b)("p",null,"The goal is Java/javascript programmers to continue to use the driver like they are used to do it,\neven if they use cMQL"),Object(l.b)("h4",{id:"cmql-is-not-embedded"},"cMQL is not embedded"),Object(l.b)("p",null,"MongoDB tries to connect MQL with programming languages with JSON as bridge,allowing MQL to be embeded in their code.",Object(l.b)("br",{parentName:"p"}),"\n","But MQL is not like Java or Javascript,its looks like clojure in JSON syntax.",Object(l.b)("br",{parentName:"p"}),"\n","And programmers soon realize that MQL is a new different language.     "),Object(l.b)("p",null,"cMQL is not embedded,it can be used"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"same project with a folder for the clojure code (leinigein,maven etc)"),Object(l.b)("li",{parentName:"ul"},"or as a dependency,for example queries installed in maven as a jar,and we use them from Java")),Object(l.b)("p",null,"*exception is when the application is in Clojure/Clojurescript."),Object(l.b)("h3",{id:"run-in-many-drivers"},"Run in many drivers"),Object(l.b)("p",null,"cMQL targets all projects that cMQL can support.",Object(l.b)("br",{parentName:"p"}),"\n","The vast majority of projects are in Javascript and Java and they write complex queries.    "),Object(l.b)("p",null,"cMQL-j  "),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",{parentName:"li",href:"/docs/cMQL-j/javaapp"},"Java projects"),Object(l.b)("br",{parentName:"li"}),"queries in cMQL,call from java  "),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",{parentName:"li",href:"/docs/cMQL-j/clojureapp"},"Clojure projects"),"  ")),Object(l.b)("p",null,"cMQL-js  "),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",{parentName:"li",href:"/docs/cMQL-j/nodejsapp"},"Nodejs projects"),Object(l.b)("br",{parentName:"li"}),"queries in cMQL,call from js  "),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",{parentName:"li",href:"/docs/cMQL-j/clojurescriptapp"},"ClojureScript projects"),"  ")),Object(l.b)("p",null,"For now only Java/Nodejs driver are supported.     "),Object(l.b)("p",null,"cMQL is code is build to make this easier  "),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"cMQL-core",Object(l.b)("br",{parentName:"li"}),"Converts cMQL to MQL",Object(l.b)("br",{parentName:"li"}),"Its driver independent,allows us to replace MQL with cMQL  ",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Operators"),Object(l.b)("li",{parentName:"ul"},"Stages"),Object(l.b)("li",{parentName:"ul"},"Commands\nCommands can be used with runCommand of driver,or cMQL",Object(l.b)("br",{parentName:"li"}),"parts like pipelines can be used as arguments in driver methods  "))),Object(l.b)("li",{parentName:"ol"},"cMQL-j",Object(l.b)("br",{parentName:"li"}),"Uses cMQL-core to convert cMQL to MQL",Object(l.b)("br",{parentName:"li"}),"Adds driver specific code for example convert a MQL pipeline to a Java Arraylist"),Object(l.b)("li",{parentName:"ol"},"cMQL-js",Object(l.b)("br",{parentName:"li"}),"Uses cMQL-core to convert cMQL to MQL\nAdds driver specific code for example convert a MQL pipeline to a js array")),Object(l.b)("h3",{id:"portability"},"Portability"),Object(l.b)("p",null,"  cMQL queries are the same in all drivers.   "),Object(l.b)("p",null,"  if cMQL commands are used code is exactly the same.",Object(l.b)("br",{parentName:"p"}),"\n","if driver methods are used with cMQL arguements,code is almost exactly the same.  "),Object(l.b)("p",null,"  cMQL can act as a common query language for all the drivers it supports"),Object(l.b)("h3",{id:"perfomance"},"Perfomance"),Object(l.b)("p",null,"For Java/JS the drivers provides the way to encode/decode\ncMQL adds a way to encode/decode for clojure/clojurescript data structures also"),Object(l.b)("p",null,"Encode : driver data structures -> BSON",Object(l.b)("br",{parentName:"p"}),"\n","Decode : BSON -> driver data structures"),Object(l.b)("p",null,'Encoding is auto detected,Clojure/Clojurescript data convert directly to BSON\nDecoding we set one default for our commands/methods for example to return JS data,\nand in each query we send we can say {:decode "cljs"} for example to return something\ndifferent from the default'),Object(l.b)("p",null,"This allows us to have usable Clojure data structures without the perfomance penalty\nof BSON->JAVA->CLOJURE, ",Object(l.b)("strong",{parentName:"p"},"cMQL goes BSON<->Clojure directly")),Object(l.b)("p",null,"Generating MQL from cMQL doesn't have any perfomance cost,because queries are so small\ndata structures.  "),Object(l.b)("h3",{id:"replace-javascript"},"Replace Javascript"),Object(l.b)("p",null,"cMQL can replace Javascript,or reduce the js code size,for server side code also with the use of   "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Clojurescript (server side triggers)"),Object(l.b)("li",{parentName:"ul"},"cMQL wrappers (for js functions)"),Object(l.b)("li",{parentName:"ul"},"Clojurescript like language (for js functions)")),Object(l.b)("p",null,"For more ",Object(l.b)("a",{parentName:"p",href:"/docs/javascript-clojurescript/javascript"},"see"),"  "),Object(l.b)("p",null,"This can unify all MongoDB development under 1 language   "),Object(l.b)("h3",{id:"unify-mongodb-developement"},"Unify MongoDB developement"),Object(l.b)("p",null,"cMQL can unify all MongoDB developement under 1 language."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"cMQL for queries"),Object(l.b)("li",{parentName:"ul"},"Clojurescript for Javascript"),Object(l.b)("li",{parentName:"ul"},"Clojure for the application")))}m.isMDXComponent=!0}}]);