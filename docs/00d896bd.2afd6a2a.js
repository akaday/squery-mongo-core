(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=a.a.createContext({}),s=function(e){var t=a.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),u=s(n),p=r,m=u["".concat(c,".").concat(p)]||u[p]||b[p]||o;return n?a.a.createElement(m,l(l({ref:t},i),{},{components:n})):a.a.createElement(m,l({ref:t},i))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var i=2;i<o;i++)c[i]=n[i];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},60:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),o=(n(0),n(112)),c=["components"],l={id:"cmql-j",title:" ",sidebar_label:"cMQL-j",slug:"/encodedecode/cmql-j"},d={unversionedId:"encodedecode/cmql-j",id:"encodedecode/cmql-j",isDocsHomePage:!1,title:" ",description:"Encode",source:"@site/docs/encodedecode/cmql-j.md",slug:"/encodedecode/cmql-j",permalink:"/cmql-core/docs/encodedecode/cmql-j",version:"current",sidebar_label:"cMQL-j",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/encodedecode/intro"},next:{title:" ",permalink:"/cmql-core/docs/extras/intro"}},i=[{value:"Encode",id:"encode",children:[]},{value:"Decode",id:"decode",children:[{value:"Default decode",id:"default-decode",children:[]},{value:"Query decode",id:"query-decode",children:[]}]},{value:"Pojo",id:"pojo",children:[]},{value:"Converting documents",id:"converting-documents",children:[]}],s={rightToc:i};function u(e){var t=e.components,n=Object(a.a)(e,c);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"encode"},"Encode"),Object(o.b)("p",null,"Encode is auto detected for clojure maps or java documents.",Object(o.b)("br",{parentName:"p"}),"\n","So we don't need to do anything for example to insert clojure maps or java documents  "),Object(o.b)("p",null,"Encode is needed for pojo ,see bellow.  "),Object(o.b)("h2",{id:"decode"},"Decode"),Object(o.b)("p",null,"Decode normally in Java driver needs a registry and a result class",Object(o.b)("br",{parentName:"p"}),"\n","Because we use the same class for Clojure and and Java,the Document class,we only need\nto give the registry we want.  "),Object(o.b)("p",null,"For pojo we give both registry and result class.  "),Object(o.b)("h3",{id:"default-decode"},"Default decode"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Set the default decode method to be in Clojure    "),Object(o.b)("p",{parentName:"li"},"Create a MongoClientSettings,with the clj-registry        "),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-text"},"(update-defaults :client-settings (-> (MongoClientSettings/builder)\n                                      (.codecRegistry clj-registry)\n                                      (.build)))  \n\n(update-defaults :client (MongoClients/create (defaults :client-settings)))  \n")),Object(o.b)("p",{parentName:"li"},"*defaults is a Clojure map with the default settings  ")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Set the default decode method to be in Java"),Object(o.b)("p",{parentName:"li"},"Create a MongoClientSettings,no need to give a registry"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-text"},"(update-defaults :client-settings (-> (MongoClientSettings/builder)\n                                      (.build)))\n\n(update-defaults :client (MongoClients/create (defaults :client-settings)))\n")))),Object(o.b)("p",null,"Those methods can be called from a Java program also but here are shown only in Clojure  "),Object(o.b)("h3",{id:"query-decode"},"Query decode"),Object(o.b)("p",null,"If we dont want to use the default decode method,we set it the different decode when we call the query.",Object(o.b)("br",{parentName:"p"}),"\n","Here we assume that the default is clj-registry and we want to use j-registry.  "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Command call")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(def acoll ....)\n\n(def j-acoll (.withCodecRegistry j-registry))\n\n(q j-coll \n   (= :name "John"))\n')),Object(o.b)("p",null,"This can work also"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(q {:registry j-registry\n    :coll-name acoll-name\n    :db-name adb-name}\n   (= :name "John"))\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Method call")),Object(o.b)("p",null,"Before calling set the registry"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(.WithCodecRegistry mycoll j-registry)   ;;needed only if default is clj\n(.WithCodecRegistry mycoll clj-registry)\n")),Object(o.b)("p",null,"If it is a database method"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(.WithCodecRegistry mydb j-registry)\n(.WithCodecRegistry mydb clj-registry)\n")),Object(o.b)("p",null,"If it a client method like listDatabaseNames we need to create a new Client\nwith the registry we want"),Object(o.b)("h2",{id:"pojo"},"Pojo"),Object(o.b)("p",null,"With clojure and java,we gave only a registry.",Object(o.b)("br",{parentName:"p"}),"\n","Also we ignored the encode because its auto-found."),Object(o.b)("p",null,"With Pojo we have to give the encode from/decode to class,and the registry.  "),Object(o.b)("p",null,"cMQL provides a pojo-registry(driver.settings),which is the default pojo decode the automatic way.",Object(o.b)("br",{parentName:"p"}),"\n","If you make a custom pojo-registry use your registry.  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'\n(def db (.withCodecRegistry (.getDatabase (defaults :client) "sample_training")\n                            pojo-registry))\n\n(def grades-coll (.withCodecRegistry (.getCollection db "grades" Grade)\n                                     pojo-registry))\n\n(insert grades-coll (Grade.))  ;;encode one instance of Grade class\n(c-take-all (q grades-coll (limit 1)))   ;;aggregate and decode to Grade class \n')),Object(o.b)("h2",{id:"converting-documents"},"Converting documents"),Object(o.b)("p",null,"We can also convert documents.",Object(o.b)("br",{parentName:"p"}),"\n","Those 2 methodsa are inside driver.document namespace"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(clj->J-doc ajavadoc)      ;;clojure map to java Document \n(j-doc->clj aclojuremap)   ;;java document to clojure map\n")))}u.isMDXComponent=!0}}]);