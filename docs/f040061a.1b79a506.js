(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{105:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return d}));var n=a(2),r=a(6),o=(a(0),a(112)),l=["components"],i={id:"notation",title:" ",sidebar_label:"Notation",slug:"/cMQL/notation"},c={unversionedId:"cMQL/notation",id:"cMQL/notation",isDocsHomePage:!1,title:" ",description:"MQL support",source:"@site/docs/cMQL/notation.md",slug:"/cMQL/notation",permalink:"/cmql-core/docs/cMQL/notation",version:"current",sidebar_label:"Notation",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/cMQL/intro"},next:{title:" ",permalink:"/cmql-core/docs/cMQL/operators"}},s=[{value:"MQL support",id:"mql-support",children:[]},{value:"Fields",id:"fields",children:[]},{value:"Field references",id:"field-references",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Example(fields,references,variables)",id:"examplefieldsreferencesvariables",children:[]},{value:"Filter ()",id:"filter-",children:[]},{value:"Project []",id:"project-",children:[]},{value:"AddFields {}",id:"addfields-",children:[]},{value:"Pipeline",id:"pipeline",children:[]},{value:"Example(pipeline)",id:"examplepipeline",children:[]},{value:"Aggregation framework",id:"aggregation-framework",children:[]},{value:"Query and Update operators",id:"query-and-update-operators",children:[]},{value:"Commands",id:"commands",children:[]},{value:"Command options",id:"command-options",children:[]},{value:"More Info",id:"more-info",children:[]}],p={rightToc:s};function d(e){var t=e.components,a=Object(r.a)(e,l);return Object(o.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"mql-support"},"MQL support"),Object(o.b)("p",null,"MQL and cMQL can be mixed freely",Object(o.b)("br",{parentName:"p"}),"\n","But cMQL wraps all aggregation stages/operators so generally there is no need"),Object(o.b)("p",null,"For example i can have a MQL stage,that uses also a cMQL operator"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(q :testdb.testcoll\n  {"$addFields"\n     {"maleStudent"\n       {"$and"  [(=_ :gender "male") {"$eq" ["$type" "student"]}]}}}\n  [:!_id :maleStudent]\n  (skip 2)\n  (limit 1))\n')),Object(o.b)("p",null,"The bellow notation is to make MQL easier they dont restrict MQL"),Object(o.b)("h3",{id:"fields"},"Fields"),Object(o.b)("p",null,"Keyword on the left of a map is just a string"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'{:aField avalue} = {"aField" avalue}  \n')),Object(o.b)("h3",{id:"field-references"},"Field references"),Object(o.b)("p",null,"Keyword everywhere else is a reference\n(references cant be keys so there is no conflict)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},' :afield  = "$afield"  \n')),Object(o.b)("h3",{id:"variables"},"Variables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'  :avar.  = "$$avar"\n  :avar.field1. = "$$avar.field1"\n')),Object(o.b)("p",null,"System variables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'  :ROOT. = "$$ROOT"\n')),Object(o.b)("h3",{id:"examplefieldsreferencesvariables"},"Example(fields,references,variables)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"   {:afield (reduce (fn [:sum. :n.] (+ :sum. :n.))\n                     0\n                    :myNumbers)}\n")),Object(o.b)("p",null,"*keywords are auto-completed in IDE's for example cursive helps on that"),Object(o.b)("h3",{id:"filter-"},"Filter ()"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(< :age 25)\n(= :gender "female")\n...\n')),Object(o.b)("p",null,"Filters one after another become 1 $match stage,with $and and $expr added.",Object(o.b)("br",{parentName:"p"}),"\n","Don't use as filters things like bellow see ",Object(o.b)("a",{parentName:"p",href:"notation#query-and-update-operators"},"[Query operators and Update operators]")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'{:gender "female"}\n')),Object(o.b)("h3",{id:"project-"},"Project []"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-Text"},"[:a :!_id {:c ''} {:!d ''} ...]\n\n  :a = keep a\n  :!_id = unset _id\n  {:c ...} = add :c\n  {:!d ...} = replace :d\n\n  *(its always replace by default except add document to array place)\n")),Object(o.b)("h3",{id:"addfields-"},"AddFields {}"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"{:a1 (inc :a) :!a2 {} ...}\n\n  add :a1\n  replace :a2\n\n  *(its always replace by default except add document to array place,\n    or document to document place(causes merge))\n")),Object(o.b)("p",null,"*In the rare case where we want to add a field that has the name of a command\noption"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},' (add {:allowDiskUse "myvalue"})  ;; solves the rare problem\n')),Object(o.b)("h3",{id:"pipeline"},"Pipeline"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"nil/empty stages are removed\nThis allows to have conditional stages"),Object(o.b)("li",{parentName:"ol"},"nested stages(even if many levels) becomes flatten",Object(o.b)("br",{parentName:"li"}),"This allows functions to generate 2 or more stages that added to the pipeline")),Object(o.b)("h3",{id:"examplepipeline"},"Example(pipeline)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-Text"},"   (def x? false)\n   (defn f [] [stage2 stage3])\n\n   (q :testdb.testcoll\n       (if x? stage1)\n       (f))\n\n   Pipeline will become [stage2 stage3]  (nil removed,stages flatten)    \n   It will run as if it was  \n\n   (q :testdb.testcoll\n       stage2\n       stage3)\n\n")),Object(o.b)("h3",{id:"aggregation-framework"},"Aggregation framework"),Object(o.b)("p",null,"cMQL approach is"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"use aggregation"),Object(o.b)("li",{parentName:"ol"},"implement the operator with other aggregation operators"),Object(o.b)("li",{parentName:"ol"},"use raw MQL inside cMQL (for example the bellow match)"),Object(o.b)("li",{parentName:"ol"},"use javascript"),Object(o.b)("li",{parentName:"ol"},"use the driver methods"),Object(o.b)("li",{parentName:"ol"},"use MQL commands")),Object(o.b)("p",null,"cMQL commands uses aggregation operators for query and for pipelines for updates.\nTo use cMQL MongoDB  >= 4.2 is needed and to use the javascript in aggregation\nMongoDB >= 4.4 is needed"),Object(o.b)("p",null,"The reason is to be easy and program in 1 way",Object(o.b)("br",{parentName:"p"}),"\n","Aggregation framework can do almost all that query or update operators can do\nand much more",Object(o.b)("br",{parentName:"p"}),"\n","If something is needed it can be added in the future"),Object(o.b)("h3",{id:"query-and-update-operators"},"Query and Update operators"),Object(o.b)("p",null,"cMQL uses aggregation by default"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Query operators can be used but in raw MQL  "),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-text"},'(match { "price" { "$ne" 1.99  "$exists" true }})\n')),Object(o.b)("p",{parentName:"li"},"cMQL supports the find command but it makes it look like pipeline also\nFor example the above would be (internaly is a find , not aggregation)"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-text"},"(fq :foo.bar\n    (not= :price 1.99)\n    (exists? :price))\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Update operators are not wrapped from cMQL",Object(o.b)("br",{parentName:"p"}),"\n","Driver methods can be used or MQL update commands  "),Object(o.b)("p",{parentName:"li"},"cMQL pipepline updates has operators like get-in and assoc-in that allows complex\nupdates to be easily done"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-text"},'(assoc-in :channel\n  [{:cond (=_ :o.name. "switch") :kcond (= :k "formats")}    ;;key by condition\n   {:icond (=_ :v.formatName. "ISO8583-93")}                 ;;index by condition\n   5                                                         ;;array index      \n   "alias"]                                                  ;;document key\n "newAlias")\n')))),Object(o.b)("h3",{id:"commands"},"Commands"),Object(o.b)("p",null,"cMQL commands are similar to MQL but not completly the same\nThe reason is to provide less verbose and intuitive commands"),Object(o.b)("h3",{id:"command-options"},"Command options"),Object(o.b)("p",null,"Commands options can be given as"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'Single maps\n {:allowDiskUse true}\n {"allowDiskUse" true} (always cMQL convers the key to string)\n\nMany pairs map\n{:allowDiskUse true\n :option2 false}\n\nWith operator(if option function exists in cMQL)\n(allow-disk-use)     => {"allowDiskUse" true}\n')),Object(o.b)("h3",{id:"more-info"},"More Info"),Object(o.b)("p",null,"For more info see documentation,the API and the docstrings"))}d.isMDXComponent=!0},112:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(a),u=n,m=d["".concat(l,".").concat(u)]||d[u]||b[u]||o;return a?r.a.createElement(m,i(i({ref:t},s),{},{components:a})):r.a.createElement(m,i({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);