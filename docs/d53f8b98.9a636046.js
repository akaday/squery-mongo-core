(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{100:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return l})),n.d(a,"metadata",(function(){return i})),n.d(a,"rightToc",(function(){return p})),n.d(a,"default",(function(){return u}));var t=n(2),r=n(6),o=(n(0),n(112)),c=["components"],l={id:"groups",title:" ",sidebar_label:"Groups",slug:"/extras/groups"},i={unversionedId:"extras/groups",id:"extras/groups",isDocsHomePage:!1,title:" ",description:"Grouping",source:"@site/docs/extras/groups.md",slug:"/extras/groups",permalink:"/cmql-core/docs/extras/groups",version:"current",sidebar_label:"Groups",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/extras/arrays"},next:{title:" ",permalink:"/cmql-core/docs/extras/nested"}},p=[{value:"Grouping",id:"grouping",children:[]},{value:"Alternatives",id:"alternatives",children:[]},{value:"cMQL group array",id:"cmql-group-array",children:[]},{value:"Example1",id:"example1",children:[]},{value:"Example2",id:"example2",children:[]}],s={rightToc:p};function u(e){var a=e.components,n=Object(r.a)(e,c);return Object(o.b)("wrapper",Object(t.a)({},s,n,{components:a,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"grouping"},"Grouping"),Object(o.b)("p",null,"Grouping is a special case of reduce,where we reduce in an object with keys the ids\nand values,arrays with the members of the group(that had same id). "),Object(o.b)("p",null,"For examplpe one array like the above,can be groupped by age"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"[\n  { name: 'Alice', age: 21 },\n  { name: 'Max', age: 20 },\n  { name: 'Jane', age: 20 }\n]\n")),Object(o.b)("p",null,"Resulting in 1 object "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"{\n  20 : [{ name: 'Max', age: 20 } { name: 'Jane', age: 20 }]\n  21 : [{ name: 'Alice', age: 21 }]\n}\n")),Object(o.b)("p",null,"MQL doesn't provide a straight forward way to group arrays fast.  "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"missing document operators that we could use like contains etc to make a\nsolution like the bellow javascript code"),Object(o.b)("li",{parentName:"ul"},"missing a group operator for arrays,we have only group stage operator for collections")),Object(o.b)("h3",{id:"alternatives"},"Alternatives"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"use unwind and stage group operators\nslow and complicated,those operators changes the collection and the document structure\nfor limitations and problems with this approach ",Object(o.b)("a",{parentName:"li",href:"/docs/collections/intro#alternatives"},"see also"))),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Use javascript for example")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"function groupBy(objectArray, property) {\n  return objectArray.reduce(function (acc, obj) {\n    let key = obj[property]\n    if (!acc[key]) {\n      acc[key] = []\n    }\n    acc[key].push(obj)\n    return acc\n  }, {})\n}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"cMQL group-array operator")),Object(o.b)("p",null,"cMQL provides a group-array operator that uses lookup with pipeline,facet,unwind,group and needs\n1 dummy collection with 1 document."),Object(o.b)("p",null,"Its fast and with get-in , assoc-in operators we can get the array from any location,group it,\nand put it back very fast and simple.  "),Object(o.b)("h3",{id:"cmql-group-array"},"cMQL group array"),Object(o.b)("h3",{id:"example1"},"Example1"),Object(o.b)("p",null,"Grouping a not nested array  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(insert :testdb.testcoll [{:myarray [{:name 1 :age 20} {:name 2 :age 20} {:name 3 :age 25}]}\n                          {:myarray [{:name 4 :age 30} {:name 5 :age 40} {:name 6 :age 40}]}])\n\n(c-print-all\n  (q :testdb.testcoll\n     (group-array :myarray\n                  :age     ;;the path that i want to group-by,here its :myarray.age\n                  {:people (conj-each :a)}\n                  :mygroups)))\n")),Object(o.b)("p",null,"Results in"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{:myarray [{:name 1, :age 20} {:name 2, :age 20} {:name 3, :age 25}],\n :mygroups\n [{:_id 20, :people [{:name 1, :age 20} {:name 2, :age 20}]}\n  {:_id 25, :people [{:name 3, :age 25}]}]}\n{:myarray [{:name 4, :age 30} {:name 5, :age 40} {:name 6, :age 40}],\n :mygroups\n [{:_id 30, :people [{:name 4, :age 30}]}\n  {:_id 40, :people [{:name 5, :age 40} {:name 6, :age 40}]}]}\n")),Object(o.b)("p",null,":myarray of every document is grouped in :mygroups an array of the groups"),Object(o.b)("p",null,'If we $reduce and merge objects we can get 1 document(for the first document of the collection) like\n{\n"20" ',"[{:name 1, :age 20} {:name 2, :age 20}]",'\n"25" ',"[{:name 3, :age 25}]","}]\n}"),Object(o.b)("p",null,"But we use unknown fields(keys) and its not prefered for MQL.  "),Object(o.b)("h3",{id:"example2"},"Example2"),Object(o.b)("p",null,"Group a nested array"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(drop-collection :testdb.testcoll)\n\n(insert :testdb.testcoll [{:mymixedarray [1 {:a "b" :c {:d [{:age 1} {:age 2} {:age 3} {:age 2}]}}]}\n                          {:mymixedarray [1 {:a "b" :c {:d [{:a 1} {:a 2} {:a 3} {:a 2}]}}]}\n                          {:mymixedarray [1 {:a "b" :c {:d [1 2 3]}}]}\n                          {:mymixedarray [1 2]}])\n\n(c-print-all\n  (q :testdb.testcoll\n     (group-array (get-in :mymixedarray [1 "c" "d"])\n                  :age                                      ;;i only add the extra path\n                  {:people (conj-each :a)}\n                  :people-groups)\n     {:mymixedarray (if- (not-empty? :people-groups)\n                         (assoc-in :mymixedarray [1 "c" "d"] :people-groups)\n                         :mymixedarray)}\n     (unset :people-groups)))\n')),Object(o.b)("p",null,"Results in"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'{:mymixedarray\n [1\n  {:a "b",\n   :c\n   {:d\n    [{:_id 2, :people [{:age 2} {:age 2}]}\n     {:_id 1, :people [{:age 1}]}\n     {:_id 3, :people [{:age 3}]}]}}]}\n{:mymixedarray\n [1\n  {:a "b",\n   :c {:d [{:_id nil, :people [{:a 1} {:a 2} {:a 3} {:a 2}]}]}}]}\n{:mymixedarray [1 {:a "b", :c {:d [{:_id nil, :people [1 2 3]}]}}]}\n{:mymixedarray [1 2]}\n')),Object(o.b)("p",null,"We took the :d array with get-in,we grouped it,and put it back where it was with assoc-in\nThe second document doesn't have the same structure but this doesn't cause any problems\ngroup-array is done only when ",'[1 "c" "d"]'," is found and its an array.  "),Object(o.b)("p",null,"The condition (if- (not-empty? :people-groups) ...) is not needed if we always know that :d exists\nand its an array. "),Object(o.b)("p",null,"It works even if :d doesnt exists.If its an array with documents with out the property,\nwe group and all goes under nil , so 1 group.User can decide to not replace it in this case.  "))}u.isMDXComponent=!0},112:function(e,a,n){"use strict";n.d(a,"a",(function(){return u})),n.d(a,"b",(function(){return b}));var t=n(0),r=n.n(t);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function c(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?c(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){var a=r.a.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},u=function(e){var a=s(e.components);return r.a.createElement(p.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},m=r.a.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=t,b=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.a.createElement(b,l(l({ref:a},p),{},{components:n})):r.a.createElement(b,l({ref:a},p))}));function b(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,c=new Array(o);c[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:t,c[1]=l;for(var p=2;p<o;p++)c[p]=n[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);