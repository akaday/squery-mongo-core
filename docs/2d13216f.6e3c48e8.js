(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{112:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},b=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),b=u(r),d=n,m=b["".concat(c,".").concat(d)]||b[d]||p[d]||o;return r?a.a.createElement(m,s(s({ref:t},l),{},{components:r})):a.a.createElement(m,s({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,c=new Array(o);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,c[1]=s;for(var l=2;l<o;l++)c[l]=r[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},70:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return b}));var n=r(2),a=r(6),o=(r(0),r(112)),c=["components"],s={id:"intro",title:" ",sidebar_label:"Intro",slug:"/extras/intro"},i={unversionedId:"extras/intro",id:"extras/intro",isDocsHomePage:!1,title:" ",description:"Array,Object Operators",source:"@site/docs/extras/intro.md",slug:"/extras/intro",permalink:"/cmql-core/docs/extras/intro",version:"current",sidebar_label:"Intro",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/encodedecode/cmql-j"},next:{title:" ",permalink:"/cmql-core/docs/extras/arrays"}},l=[{value:"Array,Object Operators",id:"arrayobject-operators",children:[]},{value:"Missing array operator",id:"missing-array-operator",children:[]},{value:"Missing document operators",id:"missing-document-operators",children:[]},{value:"Missing nested Document operators",id:"missing-nested-document-operators",children:[]},{value:"Solutions",id:"solutions",children:[{value:"Stage operators",id:"stage-operators",children:[]},{value:"Javascript",id:"javascript",children:[]},{value:"cMQL",id:"cmql",children:[]}]}],u={rightToc:l};function b(e){var t=e.components,r=Object(a.a)(e,c);return Object(o.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"arrayobject-operators"},"Array,Object Operators"),Object(o.b)("p",null,"MongoDB provides many aggregation operators and MQL is so powerful.",Object(o.b)("br",{parentName:"p"}),"\n","But still some common used operations are hard to use in MQL.   "),Object(o.b)("p",null,"MQL provides stage operators but those are made for collections(not arrays),\nand for root documents(not nested documents)   "),Object(o.b)("h3",{id:"missing-array-operator"},"Missing array operator"),Object(o.b)("p",null,"Add 1 member to the end fast ($concat can do it but slow)  "),Object(o.b)("p",null,"Common use case is when reducing one array to another array.",Object(o.b)("br",{parentName:"p"}),"\n","The bellow is usable only if :myarray size <500 members.  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(reduce (fn [:new-array. :mem.]\n          (conj :new-array :mem.))\n        []\n        :myarray)\n")),Object(o.b)("p",null,"Effects only big arrays(100+ members),and multiple calls of concat",Object(o.b)("br",{parentName:"p"}),"\n","If we dont have big arrays the above works without problems  "),Object(o.b)("h3",{id:"missing-document-operators"},"Missing document operators"),Object(o.b)("p",null,"MQL doesn't provide operators like the bellow  "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"contains(k)"),Object(o.b)("li",{parentName:"ul"},"get(k)"),Object(o.b)("li",{parentName:"ul"},"assoc(k,v)  (assoc => add new pair)"),Object(o.b)("li",{parentName:"ul"},"dissoc(k)   (dissoc => remove key)")),Object(o.b)("p",null,"k,v could be "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"literal"),Object(o.b)("li",{parentName:"ul"},"field reference"),Object(o.b)("li",{parentName:"ul"},"variable")),Object(o.b)("p",null,"Common use case is when we group object of array based on some property.\nSee ",Object(o.b)("a",{parentName:"p",href:"/docs/collections/groups"},"Groups")),Object(o.b)("h3",{id:"missing-nested-document-operators"},"Missing nested Document operators"),Object(o.b)("p",null,"Many times we need to use those,nested.  "),Object(o.b)("p",null,"For example ,get into an array,then a document,then an array etc ..."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(get-in :myarray [1 "b" 2])\n')),Object(o.b)("h2",{id:"solutions"},"Solutions"),Object(o.b)("h3",{id:"stage-operators"},"Stage operators"),Object(o.b)("p",null,"Stage operators like the ones that we use to $addFields,$project,$group etc",Object(o.b)("br",{parentName:"p"}),"\n","They work for collections,not for arrays or nested documents  "),Object(o.b)("p",null,"We can't just use a stage operator inside an expression",Object(o.b)("br",{parentName:"p"}),"\n",'They also don\'t allow us to use expressions on them,like $project "$$myvar"   '),Object(o.b)("p",null,"We can unwind arrays,or merge documents with the root,but those operations        "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"they change the document structure      "),Object(o.b)("li",{parentName:"ul"},"we need to re-structure the document           "),Object(o.b)("li",{parentName:"ul"},"even if we can do it,code can be complicated               "),Object(o.b)("li",{parentName:"ul"},"and it can be slower also   ")),Object(o.b)("p",null,"Keeping data inside arrays, is simpler and fits more with the document based MongoDB model,and\nwith sharded collections.   "),Object(o.b)("h3",{id:"javascript"},"Javascript"),Object(o.b)("p",null,"We can use Javascript with $function,and $accumulator and do all the above easily.  "),Object(o.b)("p",null,"But Javascript is slower than aggragation operators,and its a different language. "),Object(o.b)("h3",{id:"cmql"},"cMQL"),Object(o.b)("p",null,"cMQL uses MQL operators,that reduces the code complexity,and make it easier to process arrays\nand documents in place,without changing the document structure.      "),Object(o.b)("p",null,"For cMQL solutions see "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"/docs/collections/arrays"},"Arrays")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"/docs/collections/groups"},"Groups")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"/docs/collections/nested"},"Document operators and Nested operators"),"  ")))}b.isMDXComponent=!0}}]);