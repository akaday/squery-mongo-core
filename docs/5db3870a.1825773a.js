(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),l=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),b=a,u=p["".concat(c,".").concat(b)]||p[b]||m[b]||o;return n?r.a.createElement(u,s(s({ref:t},d),{},{components:n})):r.a.createElement(u,s({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=b;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var d=2;d<o;d++)c[d]=n[d];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),o=(n(0),n(112)),c=["components"],s={id:"commands",title:" ",sidebar_label:"Commands and Methods",slug:"/cMQL/commands"},i={unversionedId:"cMQL/commands",id:"cMQL/commands",isDocsHomePage:!1,title:" ",description:"Commands",source:"@site/docs/cMQL/commands.md",slug:"/cMQL/commands",permalink:"/cmql-core/docs/cMQL/commands",version:"current",sidebar_label:"Commands and Methods",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/cMQL/arguments"},next:{title:" ",permalink:"/cmql-core/docs/cmqltool/generatemql"}},d=[{value:"Commands",id:"commands",children:[]},{value:"Insert",id:"insert",children:[]},{value:"Aggregate",id:"aggregate",children:[]},{value:"Cursor",id:"cursor",children:[]},{value:"Find",id:"find",children:[]},{value:"Find and Modify",id:"find-and-modify",children:[]},{value:"Delete",id:"delete",children:[]},{value:"Update",id:"update",children:[]},{value:"Count",id:"count",children:[]},{value:"Dinstict",id:"dinstict",children:[]}],l={rightToc:d};function p(e){var t=e.components,n=Object(r.a)(e,c);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"commands"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/command/"},"Commands")),Object(o.b)("p",null,"cMQL can be used in 2 ways    "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"cMQL commands, like MQL commands (here we focus on this way)   "),Object(o.b)("li",{parentName:"ul"},"driver methods with cMQL arguments     ")),Object(o.b)("p",null,"cMQL supports more commands, here are some of them.   "),Object(o.b)("h3",{id:"insert"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/command/insert/"},"Insert")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"Single document\n(insert :testdb.testcoll doc option1 option2 ...)\n\nBulk insert\n(insert :testdb.testcoll [doc1 doc2 ...] option1 option2})\n")),Object(o.b)("h3",{id:"aggregate"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/command/aggregate/"},"Aggregate")),Object(o.b)("p",null,"()->filters {}->addfields []->project\nPipeline stages can be nil(useful to generate stage on condition)\nor nested(usefull to generate multiple stages)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(q :testdb.testcoll\n   (>_ :age 25)\n   (=_ :gender 'female')       ; filters =>1 match stage\n   {:pass (>_ :grade 5)}       ; addFields\n   (group :hairColor           ; _id renamed to hairCorl\n          {:count (sum- 1)})\n   [:count]                    ; project,keep only count\n   (sort- :!count)             ; sort descending\n   (skip 2)\n   (limit 1)\n   {:allowDiskUse   true})\n")),Object(o.b)("h3",{id:"cursor"},"Cursor"),Object(o.b)("p",null,"cMQL uses the driver cursor object.",Object(o.b)("br",{parentName:"p"}),"\n","So its commands returns normal driver cursors."),Object(o.b)("p",null,"At first versions of cMQL there were implementatiosn of cursors using multiple ",Object(o.b)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/command/getMore/"},"getMore"),Object(o.b)("br",{parentName:"p"}),"\n","But this approach was abandonded and cursor drivers are kept."),Object(o.b)("h3",{id:"find"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/command/find/"},"Find")),Object(o.b)("p",null,"Find is a subset of aggregate",Object(o.b)("br",{parentName:"p"}),"\n","filters/project/sort/skip/limit as if it was pipeline stages",Object(o.b)("br",{parentName:"p"}),"\n","(they are auto converted to find command options)",Object(o.b)("br",{parentName:"p"}),"\n","The rest are options  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(fq :testdb.testcoll\n    (>_ :spent 150)\n    (sort- :!spent)\n    [:!_id :spent {:aspent (+_ :spent 20)}]\n    (skip 5)\n    (limit 1)\n    {:singleBatch true})\n")),Object(o.b)("h3",{id:"find-and-modify"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/command/findAndModify/"},"Find and Modify")),Object(o.b)("p",null,"Find and Modify as one step",Object(o.b)("br",{parentName:"p"}),"\n","query/update/sort as if it was pipeline stages",Object(o.b)("br",{parentName:"p"}),"\n","The rest are options",Object(o.b)("br",{parentName:"p"}),"\n","If many match the first document is choosen  "),Object(o.b)("p",null,"Document as filter is allowed only in Update/Find Modify and only if {upsert :true}  "),Object(o.b)("p",null,"Call"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"Find-Modify (no upsert)\n(find-and-modify :testdb.testcoll\n                 (=_ :name 'MongoDB')\n                 {:name (str- :name '-with-id=1')}\n                 (sort- :_id)\n                 (fields-o :!_id :name)\n                 (new-o))\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"Upsert (when upsert true => first argument doc(only then))\n(find-and-modify :testdb.testcoll\n                 {:_id 4}\n                 {:name (if- (exist?- :name)\n                          (str- :name '-with-id=4')\n                          'new-name')}\n                 {:upsert true} ;; upsert => first argument document\n                 (fields-o :!_id :name)\n                 (new-o))\n")),Object(o.b)("h3",{id:"delete"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/command/delete/"},"Delete")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(delete :testdb.testcoll (dq ...) (dq ..) opt1 opt2 ...)\n(delete :testdb.testcoll [(dq ...) (dq ..)] {:ordered true} ...)\n")),Object(o.b)("p",null,"Each dq(member of deletes) can have many filters\nThe rest are options (:limit/:collation/:hint/:comment)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(dq filter1\n    filter2\n    ...\n    option1\n    option2)\n")),Object(o.b)("p",null,"Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(delete :testdb.testcoll\n        (dq (=_ :name "MongoDB")\n            {:limit 1}))  ;;{:limit 0} is the default\n')),Object(o.b)("h3",{id:"update"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/command/update/"},"Update")),Object(o.b)("p",null,"Update documents using one or more update queries uq\nUpdate many is the default {:limit 0}"),Object(o.b)("p",null,"(to update nested arrays/documents ",Object(o.b)("a",{parentName:"p",href:"/docs/howto/nested"},"see"),")"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(update- :testdb.testcoll (uq ...) (uq ..) opt1 opt2 ...)\n(update- :testdb.testcoll [(uq ...) (uq ..)] opt1 opt2 ...)\n")),Object(o.b)("p",null,"Each uq will be a member of :updates [] see update command"),Object(o.b)("p",null,"uq works only with pipeline updates\nstage=$addFields=$set/$project/$unset/$replaceRoot=$replaceWith"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(uq filter1/document(if upsert)\n    filter2\n    stage1\n    stage2\n    ...\n    option1\n    option2)\n")),Object(o.b)("p",null,"Document as filter is allowed only in Update/Find Modify and only if {upsert :true}  "),Object(o.b)("p",null,"Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"No upsert\n\n(update- :testdb.grades\n  (uq (=_ :_id 2)\n      {:grades (map- (fn- [:grade-] (inc- :grade-)):grades)}))\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"Upsert(if upsert true => document always as first argument)\n\n(update- :testdb.grades\n  (uq {:_id 4}    ; q=the first document,only if upsert\n      {:grade (if- (exist?- :grades)\n                   (inc- :grade)\n                   0)}             \n      {:upsert true})\n  {:ordered true})\n")),Object(o.b)("h3",{id:"count"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/command/count/"},"Count")),Object(o.b)("p",null,"Count documents with optional query on them",Object(o.b)("br",{parentName:"p"}),"\n","Can be done with aggregation",Object(o.b)("br",{parentName:"p"}),"\n","query/limit/skip use as aggregate stages  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(q-count- :testdb.testcoll\n          (=_ :dept 'A')      ; filters like aggregation\n          (skip 1)\n          (limit 1))\n")),Object(o.b)("h3",{id:"dinstict"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/command/distinct/"},"Dinstict")),Object(o.b)("p",null,"Distinct a field,make it an array,with optinal query first",Object(o.b)("br",{parentName:"p"}),"\n","Can be done with aggregation  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(distinct-c :testdb.testcoll\n            (not=_ :dept 'B')\n            {:key 'dept'})\n")))}p.isMDXComponent=!0}}]);