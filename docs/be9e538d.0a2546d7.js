(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=b(n),u=a,m=d["".concat(c,".").concat(u)]||d[u]||p[u]||o;return n?r.a.createElement(m,i(i({ref:t},l),{},{components:n})):r.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var a=n(2),r=n(6),o=(n(0),n(112)),c=["components"],i={id:"nested",title:" ",sidebar_label:"Nested",slug:"/extras/nested"},s={unversionedId:"extras/nested",id:"extras/nested",isDocsHomePage:!1,title:" ",description:"Construct paths",source:"@site/docs/extras/nested.md",slug:"/extras/nested",permalink:"/cmql-core/docs/extras/nested",version:"current",sidebar_label:"Nested",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/extras/groups"},next:{title:" ",permalink:"/cmql-core/docs/development/contribute"}},l=[{value:"Construct paths",id:"construct-paths",children:[]},{value:"MongoDB paths",id:"mongodb-paths",children:[]},{value:"cMQL path operators",id:"cmql-path-operators",children:[]},{value:"Conditions",id:"conditions",children:[]},{value:"Get with condition",id:"get-with-condition",children:[]},{value:"Update with condition",id:"update-with-condition",children:[]},{value:"Performance",id:"performance",children:[]}],b={rightToc:l};function d(e){var t=e.components,n=Object(r.a)(e,c);return Object(o.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"construct-paths"},"Construct paths"),Object(o.b)("p",null,"cMQL provides document operators  "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"and the nested versions of them like get-in,assoc-in etc  "),Object(o.b)("li",{parentName:"ul"},"they work in both arrays and documents nested  "),Object(o.b)("li",{parentName:"ul"},"they costruct paths ",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"constants  "),Object(o.b)("li",{parentName:"ul"},"variables in paths  "),Object(o.b)("li",{parentName:"ul"},"conditions in paths  ",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"member condtion",Object(o.b)("br",{parentName:"li"}),"for example (get doc $$key) if $$key+$$avar=5  "),Object(o.b)("li",{parentName:"ul"},"parent condition",Object(o.b)("br",{parentName:"li"}),"for example {:name smith cars ","[...]","} get the cars if name=smith  ")))))),Object(o.b)("h3",{id:"mongodb-paths"},"MongoDB paths"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"stage operators (addfields,unset,project) and  . for the path\npath is very limited\nnot mixed,no variables,no conditions\nthis means that its only for top level,or nested documents where\nall parents are documents\nfor example i can do (addFields {:mydoc1.mydoc2.h 5})\nbut its very limited (addFields {:mydoc.2.$$x.h 5}) doesnt work")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"aggregate operators\nusing those we can do them but its hard and requires lot of code\nwith $map,$mergeObjects,$ObjectToArray,$ArrayToObject etc")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"For example"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-text"},' {:myarray [1 {:a "b" :c {:d [1 2 3]}}]}\n')),Object(o.b)("p",{parentName:"li"},"  how to update ","[1 :c :d 1]"," to be 10 ?",Object(o.b)("br",{parentName:"p"}),"\n","its hard even to get there,and even harder to re-construct :myarray back"))),Object(o.b)("h3",{id:"cmql-path-operators"},"cMQL path operators"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"get/get-in\nget and contains"),Object(o.b)("li",{parentName:"ol"},"assoc/assoc-in\nto add/update"),Object(o.b)("li",{parentName:"ol"},"dissoc/dissoc-in\nto remove")),Object(o.b)("p",null,"For example in the above"),Object(o.b)("p",null,"Get it"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(get-in [1 "c" "d" 1])  \n')),Object(o.b)("p",null,"Update it"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(assoc-in [1 "c" "d" 1] 10)\n')),Object(o.b)("p",null,"Remove it"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},' (dissoc-in [1 "c" "d" 1])\n')),Object(o.b)("h3",{id:"conditions"},"Conditions"),Object(o.b)("p",null,"Many times we don't know the exact index or key,so we give a filter(condition)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-Text"},"Types of conditions\n\nicond   condition of the index\nkcond   condition for the key\n\ncond    condition for the parent\n\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"Predefined variables\nI use those when i define the conditions\n\n:a.   array parent\n:o.   object parent\n\n:k.   key for objects only\n:v.   value for objects/arrays  \n")),Object(o.b)("h3",{id:"get-with-condition"},"Get with condition"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'Same as above with simple equality or type conditions\n\n{:myarray [1 {:a "b" :c {:d [1 2 3]}}]}\n\n\n(get-in :myarray\n  [\n    {\n      :icond (= :v. {:a "b" :c {:d [1 2 3]}})\n    }\n    ;;i am now in {:a "b" :c {:d [1 2 3]}}\n    {\n      ;;key "c" is ok only if its value is an object\n      :kcond (and (= :k. "c")\n                  (object? :v.))\n    }\n    ;;we are at {:d [1 2 3]} now\n    "d"\n    ;;we are at [1 2 3]\n    1])\n\nReturns 2 again like above\n')),Object(o.b)("p",null,"Same as the above but with parent and more conditions"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'\n{:myarray [1 {:a "b" :c {:d [1 2 3]}}]}\n\n(get-in- :myarray\n  [\n    {\n      ;;parent cond,second member to be object => parent pass\n      :cond (object? (get :a. 1))\n\n      ;;index cond,to be object(1 dont pass,{:a ...} passes)\n      :icond (object? :v.)\n\n    }\n    ;;i am now in {:a "b" :c {:d [1 2 3]}}\n    {\n      ;;parent cond,has "c" key with value object => parent passes\n      :cond (object? (get :o. "c"))\n      ;; :c key passes, its not equal with "a" and doesn\'t have value "b"\n      :kcond (and (not= :k. "a")\n                  (not= :v. "b"))\n    }\n    ;;we are at {:d [1 2 3]} now\n    "d"\n    ;;we are at [1 2 3]\n    1])\n\nReturns 2 again like above    \n')),Object(o.b)("p",null,"With get-in i can easily get into nested structures even if mixed\nand even if i doesn't know what i am looking for exactly"),Object(o.b)("p",null,"Global conditions allows to filter the parent\nAnd :k- :v- allows to filter the key/value or the member of the array to select\nwhere i will go."),Object(o.b)("h3",{id:"update-with-condition"},"Update with condition"),Object(o.b)("p",null,"assoc-in works exactly the same just takes one more argument the value to update\nIf update is successful i get an array/document depending of the update\nelse i get nil to know that it failed"),Object(o.b)("p",null,"This is useful when i don't know if a field exists for example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'\n{:myarray [1 {:a "b" :c {:d [1 2 3]}}]}\n\nWithous conditions\n\n(assoc-in :myarray [1 "c" "d" 1] 20)   \n;; returns [1 {:a "b" :c {:d [1 20 3]}}]\n\n(assoc-in :myarray\n  [\n    {\n      ;;parent cond,second member to be object => parent pass\n      :cond (object? (get :a. 1))\n\n      ;;index cond,to be object(1 dont pass,{:a ...} passes)\n      :icond (object? :v.)\n\n    }\n    ;;i am now in {:a "b" :c {:d [1 2 3]}}\n    {\n      ;;parent cond,has "c" key with value object => parent passes\n      :cond (object? (get :o. "c"))\n      ;; :c key passes, its not equal with "a" and doesn\'t have value "b"\n      :kcond (and (not= :k. "a")\n                  (not= :v. "b"))\n    }\n    ;;we are at {:d [1 2 3]} now\n    "d"\n    ;;we are at [1 2 3]\n    1]\n  20)\n\n;; returns [1 {:a "b" :c {:d [1 20 3]}}]\n\n')),Object(o.b)("h2",{id:"performance"},"Performance"),Object(o.b)("p",null,"if key-cond or index-cond they are slow (both in MQL handmade or cMQL assoc/get)\n(key-cond requires $objectToArray and then search)"),Object(o.b)("p",null,"get "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"if constants its fast (the common use case) "),Object(o.b)("li",{parentName:"ul"},"if variables fast only for arrays ")),Object(o.b)("p",null,"*perfomance like handmade MQL"),Object(o.b)("p",null,"assoc "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"if objects fast ($mergeObjects) (the common use case)"),Object(o.b)("li",{parentName:"ul"},"if arrays slow (if add in the end 1 concat,else split and concat )")),Object(o.b)("p",null,"*slower than handmade MQL,if >million documents and deep nested like 5 levels\ntest perfomance(we send bigger queries because MQL doenst have functions)",Object(o.b)("br",{parentName:"p"}),"\n","for smaller collections its safe similar to handmade like 1x-1.5x  "),Object(o.b)("p",null,"dissoc"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"slow for both arrays and objects "),Object(o.b)("li",{parentName:"ul"},"objects $objectToArray filter and back $ArrayToObject"),Object(o.b)("li",{parentName:"ul"},"arrays (if the last one 1 slice,else 2 slices and concat)")),Object(o.b)("p",null,"Conclusion "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"fast means constant cost independent of array size    "),Object(o.b)("li",{parentName:"ul"},"slow matters ",Object(o.b)("strong",{parentName:"li"},"only")," for big arrays/objects   "),Object(o.b)("li",{parentName:"ul"},"index-cond and key-cond save us from writing complicated code        ")))}d.isMDXComponent=!0}}]);