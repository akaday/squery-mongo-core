(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return p}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),b=u(n),m=r,p=b["".concat(c,".").concat(m)]||b[m]||d[m]||o;return n?a.a.createElement(p,l(l({ref:t},s),{},{components:n})):a.a.createElement(p,l({ref:t},s))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var s=2;s<o;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},113:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},117:function(e,t,n){"use strict";var r=n(0),a=n(118);t.a=function(){const e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},118:function(e,t,n){"use strict";var r=n(0);const a=Object(r.createContext)(void 0);t.a=a},119:function(e,t,n){"use strict";var r=n(0),a=n.n(r),o=n(117),c=n(113),l=n(48),i=n.n(l);const s=37,u=39;t.a=function(e){const{block:t,children:n,defaultValue:l,values:b,groupId:d,className:m}=e,{tabGroupChoices:p,setTabGroupChoices:f}=Object(o.a)(),[O,h]=Object(r.useState)(l),[g,v]=Object(r.useState)(!1);if(null!=d){const e=p[d];null!=e&&e!==O&&b.some((t=>t.value===e))&&h(e)}const j=e=>{h(e),null!=d&&f(d,e)},y=[],w=e=>{e.metaKey||e.altKey||e.ctrlKey||v(!0)},N=()=>{v(!1)};return Object(r.useEffect)((()=>(window.addEventListener("keydown",w),window.addEventListener("mousedown",N),()=>{window.removeEventListener("keydown",w),window.removeEventListener("mousedown",N)})),[]),a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t},m)},b.map((e=>{let{value:t,label:n}=e;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===t,className:Object(c.a)("tabs__item",i.a.tabItem,{"tabs__item--active":O===t}),style:g?{}:{outline:"none"},key:t,ref:e=>y.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case u:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case s:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(y,e.target,e),w(e)},onFocus:()=>j(t),onClick:()=>{j(t),v(!1)},onPointerDown:()=>v(!1)},n)}))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(n).filter((e=>e.props.value===O))[0]))}},120:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=function(e){return a.a.createElement("div",null,e.children)}},73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return m}));var r=n(2),a=n(6),o=(n(0),n(112)),c=n(119),l=n(120),i=["components"],s={id:"operators",title:" ",sidebar_label:"Operators",slug:"/cMQL/operators"},u={unversionedId:"cMQL/operators",id:"cMQL/operators",isDocsHomePage:!1,title:" ",description:"Operators overview",source:"@site/docs/cMQL/operators.md",slug:"/cMQL/operators",permalink:"/cmql-core/docs/cMQL/operators",version:"current",sidebar_label:"Operators",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/cMQL/notation"},next:{title:" ",permalink:"/cmql-core/docs/cMQL/stages"}},b=[{value:"Operators overview",id:"operators-overview",children:[]},{value:"if cond",id:"if-cond",children:[]},{value:"let",id:"let",children:[]},{value:"map filter reduce",id:"map-filter-reduce",children:[]},{value:"functions defmfn defnmfn",id:"functions-defmfn-defnmfn",children:[]}],d={rightToc:b};function m(e){var t=e.components,n=Object(a.a)(e,i);return Object(o.b)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"operators-overview"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/operator/aggregation/"},"Operators overview")),Object(o.b)("p",null,"cMQL supports all aggregation operators see the API",Object(o.b)("br",{parentName:"p"}),"\n","Bellow are some more complicated ones.   "),Object(o.b)("p",null,"For an overview see ",Object(o.b)("a",{parentName:"p",href:"/docs/#example-4"},"Example2"),"    "),Object(o.b)("h3",{id:"if-cond"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/operator/aggregation/cond/"},"if")," ",Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/operator/aggregation/switch/"},"cond")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(q :testdb.testcoll  \n  {\n    :f (if- (= :a 1) 2 3)\n    :c (cond (= :a 1) 2\n             (= :a 2) 5\n             :else 10)})\n")),Object(o.b)("h3",{id:"let"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/operator/aggregation/let/"},"let")),Object(o.b)("p",null,"let allows depended variables also, producing the minimun possible nested ",Object(o.b)("inlineCode",{parentName:"p"},"$let"),".\n(for now don't define the same variable multiple times in the same ",Object(o.b)("inlineCode",{parentName:"p"},"let"),")"),Object(o.b)(c.a,{defaultValue:"cMQL",values:[{label:"cMQL",value:"cMQL"},{label:"MQL",value:"MQL"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"cMQL",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(let [:a. 1                             \n      :b. 2                             \n      :c. (+ :a. :b.)                   \n      :d. (+ :a. :c.)                   \n      :e. (+ :b. :a. :d.)               \n      :k. (+ :b. :a. :d. :c. :e.)       \n      :z. 3                             \n      :l. :c.]\n    :k.)\n"))),Object(o.b)(l.a,{value:"MQL",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'{"$let": \n  {"vars": {"a": 1, "b": 2, "z": 3},\n   "in": \n   {"$let": \n     {"vars": {"c": {"$add": ["$$a", "$$b"]}},\n      "in": \n      {"$let": \n        {"vars": {"d": {"$add": ["$$a", "$$c"]}, "l": "$$c"},\n         "in": \n         {"$let": \n           {"vars": {"e": {"$add": ["$$b", "$$a", "$$d"]}},\n            "in": \n             {"$let": \n               {"vars": \n                 {"k": {"$add": ["$$b", "$$a", "$$d", "$$c", "$$e"]}},\n                  "in": "$$k"}}}}}}}}}}\n')))),Object(o.b)("h3",{id:"map-filter-reduce"},Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/operator/aggregation/map/"},"map")," ",Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/operator/aggregation/filter/"},"filter")," ",Object(o.b)("a",{parentName:"h3",href:"https://docs.mongodb.com/manual/reference/operator/aggregation/reduce/"},"reduce")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(filter (fn [:m.] (some? :m.)) :myarray)\n(map (fn [:i.] (+ :i. 1)) :myarray)\n(reduce (fn [:sum. :e.] (+ :sum. :e.)) 0 :myarray)\n")),Object(o.b)("p",null,"*if i don't want names for the arguments i can use :value. or :this. like  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(filter (fn [:this.] (some? :this.)) :myarray)\n(map (fn [:this.] (+ :this. 1)) :myarray)\n(reduce (fn [:value. :this.] (+ :value. :this.)) 0 :myarray)\n")),Object(o.b)("h3",{id:"functions-defmfn-defnmfn"},"functions defmfn defnmfn"),Object(o.b)("p",null,"MQL doens't have functions",Object(o.b)("br",{parentName:"p"}),"\n","But we can use the driver and cMQL like functions   "),Object(o.b)("h4",{id:"driver-functions"},"driver functions"),Object(o.b)("p",null,"If we want to use a function to generate cMQL we can do it,using the macro cmql like"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(defn myfn [n]\n  (cmql (+ n 2)))   ;;when called will generate  {"$add" [n 2]}\n')),Object(o.b)("p",null,"This can be used for code re-use or for very big queries   "),Object(o.b)("h4",{id:"mongo-functions"},"mongo functions"),Object(o.b)("p",null,'MQL doens\'t have functions for map/filter/reduce it uses a variable key "vars",and a body "in"',Object(o.b)("br",{parentName:"p"}),"\n","cMQL makes them look like normal functions   "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"(map (fn [:i.] (+ :i. 1)) :myarray)\n")),Object(o.b)("p",null,"But we can go even futher and def them as independent functions  "),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"defnmfn")," Allows normal clojure code to be used, we call them before we use them see bellow  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(defnmfn myf [m]\n  (str "hello " m))   ;;body can work both for clojure and cMQL\n\n(q :testdb.testcoll\n   {:a (map (myf :m.) :myarray)}))\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"defmfn")," We declare them as mongo-functions,they use mongo-variables inside the body,and they dont take arguments when are called.   "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'(defnmfn myf1 [:m.]\n  (str "hello " :m.))\n\n(q :testdb.testcoll\n   {:a (map myf :myarray)})\n')),Object(o.b)("p",null,"All those functions can only be use cMQL operators(or raw MQL) in their body,but because cMQL is like Clojure we can have clojure code re-use.",Object(o.b)("br",{parentName:"p"}),"\n","If we want to use clojure inside them we can use c/str (c alias for clojure.core)  "))}m.isMDXComponent=!0}}]);