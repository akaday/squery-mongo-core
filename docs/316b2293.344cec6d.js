(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{112:function(e,r,a){"use strict";a.d(r,"a",(function(){return p})),a.d(r,"b",(function(){return m}));var t=a(0),n=a.n(t);function c(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){c(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function s(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},c=Object.keys(e);for(t=0;t<c.length;t++)a=c[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)a=c[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=n.a.createContext({}),u=function(e){var r=n.a.useContext(i),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},p=function(e){var r=u(e.components);return n.a.createElement(i.Provider,{value:r},e.children)},b={inlineCode:"code",wrapper:function(e){var r=e.children;return n.a.createElement(n.a.Fragment,{},r)}},d=n.a.forwardRef((function(e,r){var a=e.components,t=e.mdxType,c=e.originalType,o=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),p=u(a),d=t,m=p["".concat(o,".").concat(d)]||p[d]||b[d]||c;return a?n.a.createElement(m,l(l({ref:r},i),{},{components:a})):n.a.createElement(m,l({ref:r},i))}));function m(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var c=a.length,o=new Array(c);o[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:t,o[1]=l;for(var i=2;i<c;i++)o[i]=a[i];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},72:function(e,r,a){"use strict";a.r(r),a.d(r,"frontMatter",(function(){return l})),a.d(r,"metadata",(function(){return s})),a.d(r,"rightToc",(function(){return i})),a.d(r,"default",(function(){return p}));var t=a(2),n=a(6),c=(a(0),a(112)),o=["components"],l={id:"arrays",title:" ",sidebar_label:"Arrays",slug:"/extras/arrays"},s={unversionedId:"extras/arrays",id:"extras/arrays",isDocsHomePage:!1,title:" ",description:"Array operators",source:"@site/docs/extras/arrays.md",slug:"/extras/arrays",permalink:"/cmql-core/docs/extras/arrays",version:"current",sidebar_label:"Arrays",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/extras/intro"},next:{title:" ",permalink:"/cmql-core/docs/extras/groups"}},i=[{value:"Array operators",id:"array-operators",children:[]},{value:"Examples",id:"examples",children:[{value:"Reduce (Array-&gt;single value)",id:"reduce-array-single-value",children:[]},{value:"Array-&gt;Array(map/filter)",id:"array-arraymapfilter",children:[]},{value:"Array-&gt;Array(reduce array operator)",id:"array-arrayreduce-array-operator",children:[]},{value:"Array-&gt;Array (reduce cMQL operator)",id:"array-array-reduce-cmql-operator",children:[]},{value:"Nested array",id:"nested-array",children:[]}]}],u={rightToc:i};function p(e){var r=e.components,a=Object(n.a)(e,o);return Object(c.b)("wrapper",Object(t.a)({},u,a,{components:r,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"array-operators"},"Array operators"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"map\nkeep all members,change members"),Object(c.b)("li",{parentName:"ul"},"filter\nkeep some members,unchanged"),Object(c.b)("li",{parentName:"ul"},"map and filter combined (2 passes if not lazy implemented)\nkeep some members,change members"),Object(c.b)("li",{parentName:"ul"},"reduce\nReduce is more general,we can do the above and more.\nWe can also carry any argument with us as state.",Object(c.b)("br",{parentName:"li"}),"map and filter can only see the current member  ")),Object(c.b)("p",null,"When we do array operations we need to use a fast function,because it is expected\nto run many times.  "),Object(c.b)("p",null,"As being said on ",Object(c.b)("a",{parentName:"p",href:"/docs/collections/intro"},"Collections intro")," MQL doesn't provide\na fast operator to add at the end of an array.  "),Object(c.b)("p",null,"This means that we can't reduce an array to an array in a fast way.",Object(c.b)("br",{parentName:"p"}),"\n","(conj uses $concat and if we make an array with 500+ members its very slow)"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Alternatives")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"map and filter combination if possible (for cases when we want less members and changed members)      "),Object(c.b)("li",{parentName:"ul"},"use javascript(its slow,but better than cMQL conj)   "),Object(c.b)("li",{parentName:"ul"},"use cMQL reduce-array operator",Object(c.b)("br",{parentName:"li"}),"cMQL provides a fast reduce solution using $look-up(join with 1 dummy collection of 1 document),\n$facet,and accumulators.    ")),Object(c.b)("p",null,"cMQL uses this solution to group fast,but it can be used for arrays also.",Object(c.b)("br",{parentName:"p"}),"\n","Inside its group-by nil,and we can only use the few accumulators operators that we have.",Object(c.b)("br",{parentName:"p"}),"\n","Because of its limitations doesn't really solve the problem.  "),Object(c.b)("h2",{id:"examples"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-text"},"(drop-collection :testdb.testcoll)\n(drop-collection :testdb.cmql)\n\n(insert :testdb.cmql {})  ;;dummy 1 document collection in same database that group-array uses\n\n(insert :testdb.testcoll [{:myarray [1 2 2 3]}\n                          {:myarray [3 4 4]}])\n")),Object(c.b)("h3",{id:"reduce-array-single-value"},"Reduce (Array->single value)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-text"},"(c-print-all\n  (q :testdb.testcoll\n     {:sum (reduce (fn [:a. :n.]\n                      (+ :a. :n.))\n                    0\n                    :myarray)}))\n")),Object(c.b)("p",null,"Simple and very fast (as long as the function we use is fast)"),Object(c.b)("h3",{id:"array-arraymapfilter"},"Array->Array(map/filter)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-text"},"(c-print-all\n  (q :testdb.testcoll\n     {:filtered (filter (fn [:m.] (> :m. 1)) :myarray)}))\n\n;; map and keep all ($$REMOVE doesnt work to map,it adds nil)\n(c-print-all\n  (q :testdb.testcoll\n     {:maped (map (fn [:m.] (+ :m. 1)) :myarray)}))\n\n(c-print-all\n  (q :testdb.testcoll\n     {:maped-filtered (filter (fn [:m.]\n                                (> :m. 1))\n                              (map (fn [:m.] (+ :m. 1)) :myarray))}))\n")),Object(c.b)("p",null,"Simple to use and very fast (as long as the function we use is fast)",Object(c.b)("br",{parentName:"p"}),"\n","The last one the combination of filter and map,can be used as reduce alternative\nif we want to keep only some members and change them also.  "),Object(c.b)("h3",{id:"array-arrayreduce-array-operator"},"Array->Array(reduce array operator)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-text"},"(c-print-all\n  (q :testdb.testcoll\n     {:copy (reduce (fn [:a. :n.]\n                       (conj :a. :n.))\n                     []\n                     :myarray)}))\n\n")),Object(c.b)("p",null,"Simple but very slow if :myarray > 500 members,dont use in that case. "),Object(c.b)("h3",{id:"array-array-reduce-cmql-operator"},"Array->Array (reduce cMQL operator)"),Object(c.b)("p",null,"Very fast no matter how big is the array,but pipeline stage not operator",Object(c.b)("br",{parentName:"p"}),"\n","=> results are added to the root document\n=> i can later move it anywhere with assoc-in ,which is very fast"),Object(c.b)("p",null,"reduce is done using lookup with pipeline(with the dummy collection),facet,unwind,group\nits very fast and with combination of get-in and assoc-in of cMQL we can do it to\nany nested array,and then move it back into its place "),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-text"},"(c-print-all\n  (q :testdb.testcoll\n     (reduce-array :myarray  ;any expression that resolves to array,if nested i can use get-in etc\n                   {:copy       (conj-each :a)\n                    :copyFilter (conj-each (if- (> :a 1)\n                                                :a\n                                                :REMOVE.))\n                    :sum        (sum :a)})))\n")),Object(c.b)("p",null,"I can use any MQL accumulator,here i use 3 accumulators.  "),Object(c.b)("h3",{id:"nested-array"},"Nested array"),Object(c.b)("p",null,"We can use reduce-array,for nested arrays also,and i can put the results\nback to the original locations."),Object(c.b)("p",null,"Using cMQL's"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"get-in"),Object(c.b)("li",{parentName:"ul"},"assoc-in")),Object(c.b)("p",null,"The reduce-array is fast,the get-in is very fast,and the assoc-in is very fast."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-text"},'(drop-collection :testdb.testcoll)\n\n(insert :testdb.testcoll  {:mymixedarray [1 {:a "b" :c {:d [1 2 3 2]}}]})\n\n;; get-in,reduce,assoc-in to put it back in place\n(c-print-all\n  (q :testdb.testcoll\n     (reduce-array (get-in :mymixedarray [1 "c" "d"])  ;;get the nested array\n                   {:people (conj-each (if- (> :a 1)\n                                            :a\n                                            :REMOVE.))})\n     {:mymixedarray (assoc-in :mymixedarray [1 "c" "d"] :people)}  ;;but it back\n     (unset :people)))\n')))}p.isMDXComponent=!0}}]);