(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),c=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var s=c.a.createContext({}),m=function(e){var t=c.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return c.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},b=c.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=m(n),b=r,d=p["".concat(l,".").concat(b)]||p[b]||u[b]||a;return n?c.a.createElement(d,o(o({ref:t},s),{},{components:n})):c.a.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=b;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return c.a.createElement.apply(null,l)}return c.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(2),c=n(6),a=(n(0),n(112)),l=["components"],o={id:"cmql-j",title:" ",sidebar_label:"cmql-j",slug:"/api/cmql-j"},i={unversionedId:"api/cmql-j",id:"api/cmql-j",isDocsHomePage:!1,title:" ",description:"cMQL parts APIs",source:"@site/docs/api/cmql-j.md",slug:"/api/cmql-j",permalink:"/cmql-core/docs/api/cmql-j",version:"current",sidebar_label:"cmql-j",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/cmqlapp/clojurescriptapp"},next:{title:" ",permalink:"/cmql-core/docs/api/cmql-js"}},s=[{value:"cMQL parts APIs",id:"cmql-parts-apis",children:[]},{value:"Lein dependencies",id:"lein-dependencies",children:[]},{value:"Required namespaces",id:"required-namespaces",children:[]},{value:"cMQL internal namespaces",id:"cmql-internal-namespaces",children:[]},{value:"Cursive",id:"cursive",children:[]}],m={rightToc:s};function p(e){var t=e.components,n=Object(c.a)(e,l);return Object(a.b)("wrapper",Object(r.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"cmql-parts-apis"},"cMQL parts APIs"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"http://localhost:3000/cmql/index.html"},"cMQL")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"http://localhost:3000/cmql-j/index.html"},"cMQL-j")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"http://localhost:3000/cmql-js/index.html"},"cMQL-js")," ")),Object(a.b)("p",null,"*cmql is the core, written in .cljc files, shared in both cqml-j and cmql-js  "),Object(a.b)("h3",{id:"lein-dependencies"},"Lein dependencies"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},'[cmql "0.1.0-SNAPSHOT"]'),"  "),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},'[cmql-j "0.1.0-SNAPSHOT"]'),"  ")),Object(a.b)("h3",{id:"required-namespaces"},"Required namespaces"),Object(a.b)("p",null,"cMQL query functions like ",Object(a.b)("inlineCode",{parentName:"p"},"q,fq ...")," creates a local enviroment where all operators/stages are defined.",Object(a.b)("br",{parentName:"p"}),"\n","The bellow big ns definition is so the IDE provides us with auto-complete when we write code.",Object(a.b)("br",{parentName:"p"}),"\n","We dont need to exclude clojure, or :use the cmql.operators etc, we do it for the IDE and auto-complete.",Object(a.b)("br",{parentName:"p"}),"\n","Also we dont need all of them, always, this is made as namespaces overview."),Object(a.b)("p",null,"The important ones to see the API are the ",Object(a.b)("inlineCode",{parentName:"p"},"cmql.operators"),"\nThe important cmql-js ones to see the API are the ",Object(a.b)("inlineCode",{parentName:"p"},"cmql-j.commands")," and ",Object(a.b)("inlineCode",{parentName:"p"},"cmql-j.cmql-arguments"),"\ncmql-j and cmql-js have similar namespaces structure."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-text"},"(ns clojureapp.example\n  (:refer-clojure :only [])\n  (:use cmql.operators.operators  ;;aggregate operators\n        cmql.operators.stages   ;;aggregate stage operators\n        cmql.operators.options  ;;some command options\n        cmql-j.commands         ;; cmql-j commands/methods, using the cmql ones\n        cmql-j.arguments        ;; used to call driver methods, with cmql arguments\n        cmql-j.driver.cursor    ;; some cursor methods, work on driver cursors\n        cmql-j.driver.document  ;; convert maps to Document, to json etc\n        cmql-j.driver.settings  ;; default settings used to connect, clj-registry etc\n        cmql-j.macros           ;; cmql macro,provides an cmql enviroment\n        )\n  (:refer-clojure)\n  (:require [clojure.core :as c]) ;; (q (c/+ 1 2)), because q would hide the core +\n  (:import (com.mongodb.client MongoClients MongoClient)\n           (com.mongodb MongoClientSettings)))\n")),Object(a.b)("h3",{id:"cmql-internal-namespaces"},"cMQL internal namespaces"),Object(a.b)("p",null,"They are not used from the user directly. "),Object(a.b)("p",null,"Internal important used from from cMQL-j, cMQL-js"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"cmql.read-write"),Object(a.b)("li",{parentName:"ul"},"cmql.administration"),Object(a.b)("li",{parentName:"ul"},"cmql.users"),Object(a.b)("li",{parentName:"ul"},"cmql.roles"),Object(a.b)("li",{parentName:"ul"},"cmql.diagnostic")),Object(a.b)("p",null,"Internal use from cMQL"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"cmql-convert ")),Object(a.b)("h3",{id:"cursive"},"Cursive"),Object(a.b)("p",null,"Cursive provides auto-complete, it also allows us to define how a symbol should be resolved.\nFor example if-, we can tell cursive to resolve it as clojure if (helps on spacing)\nright-click on if-,show-context actions,and resolve as if."))}p.isMDXComponent=!0}}]);