(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{112:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return d}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),i=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},b=function(e){var t=i(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),b=i(r),u=n,d=b["".concat(c,".").concat(u)]||b[u]||m[u]||o;return r?a.a.createElement(d,l(l({ref:t},s),{},{components:r})):a.a.createElement(d,l({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,c=new Array(o);c[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var s=2;s<o;s++)c[s]=r[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},83:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return p})),r.d(t,"rightToc",(function(){return s})),r.d(t,"default",(function(){return b}));var n=r(2),a=r(6),o=(r(0),r(112)),c=["components"],l={id:"intro",title:" ",sidebar_label:"Intro",slug:"/cMQL/intro"},p={unversionedId:"cMQL/intro",id:"cMQL/intro",isDocsHomePage:!1,title:" ",description:"Notation",source:"@site/docs/cMQL/intro.md",slug:"/cMQL/intro",permalink:"/cmql-core/docs/cMQL/intro",version:"current",sidebar_label:"Intro",sidebar:"someSidebar",previous:{title:" ",permalink:"/cmql-core/docs/intro/why"},next:{title:" ",permalink:"/cmql-core/docs/cMQL/notation"}},s=[{value:"Notation",id:"notation",children:[]},{value:"Source code",id:"source-code",children:[]},{value:"Parts",id:"parts",children:[]},{value:"Commands and arguments",id:"commands-and-arguments",children:[]},{value:"Examples",id:"examples",children:[]},{value:"cMQL enviroment",id:"cmql-enviroment",children:[]}],i={rightToc:s};function b(e){var t=e.components,r=Object(a.a)(e,c);return Object(o.b)("wrapper",Object(n.a)({},i,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"notation"},"Notation"),Object(o.b)("p",null,"Notation allows cMQL to have simple syntax for more see ",Object(o.b)("a",{parentName:"p",href:"/docs/cmql/notation"},"Notation")),Object(o.b)("h3",{id:"source-code"},"Source code"),Object(o.b)("p",null,"The code is seperated in 3 parts  "),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"cMQL core, commonly used code (cljc)"),Object(o.b)("li",{parentName:"ol"},"cMQL-j for the the Java driver,cMQL-js for the nodejs driver  ")),Object(o.b)("h3",{id:"parts"},"Parts"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"operators"),Object(o.b)("li",{parentName:"ol"},"stages"),Object(o.b)("li",{parentName:"ol"},"arguments (arguments to be used in the driver methods)"),Object(o.b)("li",{parentName:"ol"},"commands (generate and run MQL commands)")),Object(o.b)("p",null,"cMQL for the most part is one to one, translate of cMQL to MQL"),Object(o.b)("p",null,"For example "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-clojure"},'(defn * [& exprs]\n  {"$multiply" (vec exprs)})\n')),Object(o.b)("p",null,"Operators are implemented in"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"cmql/operators.cljc",Object(o.b)("br",{parentName:"li"}),"see also ",Object(o.b)("a",{parentName:"li",href:"/docs/cmql/operators"},"Operators")," and TODO THE API LINK ON OPERATORS"),Object(o.b)("li",{parentName:"ul"},"cmql/stages.cljc",Object(o.b)("br",{parentName:"li"}),"see also ",Object(o.b)("a",{parentName:"li",href:"/docs/cmql/stages"},"Stages")," and TODO THE API LINK ON OPERATORS"),Object(o.b)("li",{parentName:"ul"},"cmql/options.cljc  ")),Object(o.b)("p",null,"Arguments are implemented in"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"cmql_j/arguments.clj  (cMQL-j on java driver)"),Object(o.b)("li",{parentName:"ul"},"cmql_js/arguments.cljs (cMQL-js on node driver)\ncmql_js/arguments.clj  (macros of cMQL-js on node driver)")),Object(o.b)("p",null,"See also ",Object(o.b)("a",{parentName:"p",href:"/docs/cmql/arguments"},"Arguments"),"  and TODO THE API LINK ON OPERATORS"),Object(o.b)("p",null,"Commands are implemented in "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"cmql/read_write.cljc"),Object(o.b)("li",{parentName:"ul"},"cmql/administration.cljc"),Object(o.b)("li",{parentName:"ul"},"cmql/diagnostic.cljc"),Object(o.b)("li",{parentName:"ul"},"cmql/roles.cljc"),Object(o.b)("li",{parentName:"ul"},"cmql/users.cljc")),Object(o.b)("p",null,"*Commands are meant to be used if the driver is missing some command or its hard to use\nIn general cMQL doesn't try to replace the driver way, but to make the queries easier"),Object(o.b)("p",null,"Seeing the API and the docstring can many times are enough to know how to use a cMQL operator.",Object(o.b)("br",{parentName:"p"}),"\n","MongoDB documentation can help on how to use the MQL operator, and most of the times its the same with the cMQL operator."),Object(o.b)("h3",{id:"commands-and-arguments"},"Commands and arguments"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"cMQL commands  ")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'(q zips\n   (= :state "TX")\n   (group :city {:totalPop (sum :pop))\n   [:!_id :totalPop]\n   (sort :!totalPop)\n   {:allowDiskUse true}) \n\n(update- :sample_training.grades\n           (uq (= :student_id 10000)\n               {:comment "You should learn MongoDB!"}\n               {:multi false}))\n')),Object(o.b)("p",null,"Those that return cursors,use the driver method",Object(o.b)("br",{parentName:"p"}),"\n","All the others for example update uses runCommand()"),Object(o.b)("p",null,"cMQL commands generate MQL commands,they are easy to use and programmable",Object(o.b)("br",{parentName:"p"}),"\n","And completly portable,for example the above runs unchanged in Java/Nodejs"),Object(o.b)("p",null,"*cMQL provided a cursor implementation,but it has being removed,because it\nmade things more complex to have 2 types of cursors so driver cursors are kept only  "),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"Driver methods, interop with cMQL arguments  ")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'(.aggregate zips\n            (p (= :state "TX")\n               (group :city {:totalPop (sum :pop))\n               [:!_id :totalPop]\n               (sort :!totalPop))) \n')),Object(o.b)("p",null,"We use the argument wrappers   "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"p for pipelines  "),Object(o.b)("li",{parentName:"ul"},"f for filters    "),Object(o.b)("li",{parentName:"ul"},"o for options   ")),Object(o.b)("h3",{id:"examples"},"Examples"),Object(o.b)("p",null,"cMQL is meant to be learned by examples using ",Object(o.b)("a",{parentName:"p",href:"www.cmql-live.org"},"cMQL-live"),Object(o.b)("br",{parentName:"p"}),"\n","cMQL-live allows us to us to use aggregation and pipeline updates (a subset of cMQL)  "),Object(o.b)("p",null,"cMQL project examples"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Java programmers see ",Object(o.b)("a",{parentName:"li",href:"/docs/cMQL-j/javaapp"},"Java app")," and ",Object(o.b)("a",{parentName:"li",href:"/docs/cMQL-j/clojureapp"},"Clojure app"),"   "),Object(o.b)("li",{parentName:"ul"},"Javacript programmers see ",Object(o.b)("a",{parentName:"li",href:"/docs/cMQL-j/nodeapp"},"Node app")," and ",Object(o.b)("a",{parentName:"li",href:"/docs/cMQL-j/clojurescriptapp"},"Clojurescript app")),Object(o.b)("li",{parentName:"ul"},"Clojure programmers see ",Object(o.b)("a",{parentName:"li",href:"/docs/cMQL-j/clojureapp"},"Clojure app")),Object(o.b)("li",{parentName:"ul"},"Clojurescript programmers see ",Object(o.b)("a",{parentName:"li",href:"/docs/cMQL-j/clojurescriptapp"},"Clojurescript app"))),Object(o.b)("p",null,"*Clojure-app has the most examples, the rest apps are mostly a sample on how to run cMQL.",Object(o.b)("br",{parentName:"p"}),"\n","They also provide an implementation of MongoDB quickstart in cMQL.  "),Object(o.b)("p",null,"cMQL operators/stages/commands are part of the cMQL core and generate MQL operators/stages/commands.",Object(o.b)("br",{parentName:"p"}),"\n","cMQL arguments are used with the driver methods and are part of cMQL-j or cMQL-js"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"/docs/intro/what"},"See also")),Object(o.b)("h3",{id:"cmql-enviroment"},"cMQL enviroment"),Object(o.b)("p",null,"cMQL methods like q fq,or argument methods like p,f provide an cMQL enviroment.  "),Object(o.b)("p",null,"We can't use cMQL code outside of cMQL enviroment,the bellow wont work"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'(defn mystage []\n  (group :city {:totalPop (sum :pop)))\n\n(p (= :state "TX")\n   (mystage)\n   [:!_id :totalPop]\n   (sort :!totalPop))\n')),Object(o.b)("p",null,"We need ",Object(o.b)("strong",{parentName:"p"},"cmql")," macro to make it work  (wrap any valid code around cmql)  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'(defn mystage []\n  (cmql (group :city {:totalPop (sum :pop))))\n\n(p (= :state "TX")\n   (mystage)\n   [:!_id :totalPop]\n   (sort :!totalPop))\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Clojure core")),Object(o.b)("p",null,"If you want to use a clojure core function that cMQL hides,\ninside a cMQL enviroment you should use it with its namespace,for example"),Object(o.b)("p",null,"c here used as an alias for clojure.core"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},'(p (= :state (c/str "T" "X"))\n   (mystage)\n   [:!_id :totalPop]\n   (sort :!totalPop))\n')),Object(o.b)("p",null,"If we need to write alot of clojure code we make seperate function call to avoid the namespace.\nMost of the time there almost all code is clojure or almost all code is cMQL so its easy to be mixed."))}b.isMDXComponent=!0}}]);